{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"f5c16fc9b235beb1d9631dac2426017d17986d9a","modified":1618282558849},{"_id":"source/about/index.md","hash":"19457ad6b1f70a685f8e15687951a6d5b2fa17f2","modified":1618282558851},{"_id":"source/_posts/mypage.md","hash":"74e070743d6834b151d3c1c52d92dc7f69966d72","modified":1618282558850},{"_id":"source/categories/index.md","hash":"c6be4c1d65ef7160cc87744d9225ca3a49d0ba0b","modified":1618282558851},{"_id":"source/friends/index.md","hash":"1053bbcb8be9ad2db0f3b9e2c2e86c6887815c2c","modified":1618282558852},{"_id":"source/tags/index.md","hash":"262257da83ac31821115ede886be4d9420116a30","modified":1618282558853},{"_id":"source/medias/index.md","hash":"327703522ab487c81908ae8f869a19f8dce33660","modified":1618282558852},{"_id":"source/_posts/前端/javascript基础学习.md","hash":"a2c586291cabcd9093f6078134846461bda8d64e","modified":1618282417410},{"_id":"source/data/friends.json","hash":"5df385488e5c67c5ed9cb9203781650a09fe0c71","modified":1618282296365},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1618227232240},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1618227232241},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1618227232241},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"1e7240b0a237f49ed2b91ab90f1495c5e8646c60","modified":1618227232244},{"_id":"themes/hexo-theme-matery/README.md","hash":"b604a56c98c2ffdcfbef9e27cc14b7deb3b8034b","modified":1618227232242},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"67d5acabdfda0a26f15d9c1abae7177a9f56cad5","modified":1618244865187},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1618227232244},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"626d28dbc7fa2e0fb6601e324dcad08993bcf002","modified":1618227232258},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1618227232244},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"73af1520ef533bfce3af5c41ade2764dd48341cf","modified":1618227232242},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1618227232245},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1618227232259},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1618227232258},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1618227232259},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1618227232258},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"cff60f87f69155707f3a33731c7fac945cf7cd93","modified":1618227232259},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"1291eed5cc91a27607beffc8118c19493512f28f","modified":1618227232259},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1618227232260},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1618227232261},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"e6e6ab8624081e0f5e2d459427ca5069d7435c19","modified":1618227232260},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1618227232254},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1618227232260},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1618227232260},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1618227232263},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1618227232254},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1618227232254},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1618227232254},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1618227232255},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1618227232256},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1618227232255},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1618227232255},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1618227232256},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1618227232257},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1618227232256},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"6b4341fbba291c53de91babb2a0d69940a8d6547","modified":1618227232245},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1618227232257},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1618227232245},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1618227232256},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1618227232246},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1618227232246},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1618227232257},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1618227232246},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"2febeb9b824a9f5c6aa81e5c3864cb13df4965f2","modified":1618227232246},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1618227232247},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"2b33ec86be58152e0af06adcf66b1bf867940e20","modified":1618227232247},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1618227232247},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1618227232247},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1618227232247},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1618227232248},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"baf823506b71f257a42b44adaa52d42344b9cb65","modified":1618227232248},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1618227232248},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1618227232248},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"495e929d02a0fafb1a7ebbef7c5a6dda62dc60a8","modified":1618227232249},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1618227232249},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"d0c1ebccbf0869678233aa46d2a61c6112926b2f","modified":1618227232249},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1618227232250},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1618227232250},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1618227232250},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1618227232250},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"4c552a47ed5abda4f3f28fc55899e6008007a996","modified":1618227232251},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1618227232251},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"19ed1e02c68e9b529b7e7f0ef3e9c4ab693f8553","modified":1618227232251},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1618227232252},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1618227232251},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1618227232252},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1618227232253},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"d1d7c4da3d56f42541eea965a6ebf1f8e2fff0f4","modified":1618227232253},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"5eea5e6da0cbfd3d93ae7e9193fa59997b467426","modified":1618227232253},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1618227232262},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1618227232263},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1618227232262},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1618227232263},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a761d3fd042e5138e4e094b9f4777d031fe2844b","modified":1618227232262},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"02e6072d766c6f631b5b75e1d774409103605491","modified":1618227232264},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1618227232252},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1618227232264},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1618227232319},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1618227232341},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1618227232341},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1618227232252},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1618227232326},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1618227232264},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1618227232265},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1618227232265},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1618227232289},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1618227232266},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1618227232289},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1618227232290},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1618227232265},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1618227232289},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1618227232287},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1618227232288},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1618227232288},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1618227232288},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1618227232290},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1618227232291},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1618227232297},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1618227232298},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1618227232300},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1618227232299},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1618227232300},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1618227232308},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1618227232305},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1618227232309},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1618227232308},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1618227232313},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f48db880f583ad8d078ebaaa7afe60c2991e2997","modified":1618227232309},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1618227232310},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1618227232316},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1618227232313},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1618227232328},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1618227232330},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1618227232331},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1618227232332},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1618227232334},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1618227232337},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1618227232335},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1618227232336},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1618227232336},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1618227232338},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1618227232339},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1618227232340},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1618227232342},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1618227232342},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1618227232277},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1618227232277},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1618227232275},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1618227232277},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1618227232302},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1618227232302},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1618227232303},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1618227232302},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1618227232303},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1618227232303},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1618227232304},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1618227232304},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1618227232310},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1618227232305},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1618227232304},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1618227232311},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1618227232311},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1618227232312},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1618227232313},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1618227232311},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1618227232312},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1618227232292},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1618227232299},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1618227232301},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1618227232317},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1618227232320},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1618227232322},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1618227232327},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1618227232328},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1618227232329},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1618227232322},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1618227232330},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1618227232331},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1618227232334},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1618227232332},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1618227232335},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1618227232333},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1618227232337},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1618227232339},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1618227232340},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1618227232267},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1618227232268},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1618227232274},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1618227232274},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1618227232275},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1618227232287},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1618227232286},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1618227232326},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1618227232298},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1618227232306},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1618227232307},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1618227232318},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1618227232321},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1618227232325},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1618227232324},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1618227232276},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1618227232280},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1618227232286},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1618227232324},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":1618227232316},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1618227232296},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1618227232272},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1618227232284},{"_id":"public/data/friends.json","hash":"def4feb6e2c65ead353e93a7b43cbc8cfac68217","modified":1618282454539},{"_id":"public/404/index.html","hash":"52f514592b1908ab27c724ccbc65868abb28f0ab","modified":1618282454539},{"_id":"public/about/index.html","hash":"2c1beb11bbbc96a09d78f60e79bd3856f4c399b1","modified":1618282454539},{"_id":"public/friends/index.html","hash":"f37b0cd3c184564f08345e87bab83e38db024e34","modified":1618282454539},{"_id":"public/tags/index.html","hash":"20f51b1936be343470a97bf6574d006808c07b7d","modified":1618282454539},{"_id":"public/categories/index.html","hash":"1a19607ce5fed63be70e89ff42d8560d79c8a0ab","modified":1618282454539},{"_id":"public/medias/index.html","hash":"def2ec3647d1fad1d50e169d3bd4fa184af42a1f","modified":1618282454539},{"_id":"public/2021/04/13/mypage/index.html","hash":"6acdea5c8b1ccf16a4fe965df7d1ee41532b4cac","modified":1618282454539},{"_id":"public/2018/09/14/前端/javascript基础学习/index.html","hash":"679f53c209379d6dfe49bbd2f2b3efd31a2cbaa5","modified":1618282454539},{"_id":"public/archives/index.html","hash":"333969de2faf49bd91f0adba1e5d2727033363f6","modified":1618282454539},{"_id":"public/archives/2018/index.html","hash":"ec3597b04c42a4765384df91044dbadc735dd5c9","modified":1618282454539},{"_id":"public/archives/2018/09/index.html","hash":"4c56c6f6461544cdf7573ab4f49fef8e11b705fc","modified":1618282454539},{"_id":"public/archives/2021/04/index.html","hash":"aab8aee4821039e450836abd8c78dd7f7f6d6a35","modified":1618282454539},{"_id":"public/archives/2021/index.html","hash":"5f68dc33e8846cacc8d8d63ead4b32de1a4279ae","modified":1618282454539},{"_id":"public/categories/前端/index.html","hash":"8c39a1167a13547a04d9356802ed00bf3005d5f7","modified":1618282454539},{"_id":"public/tags/JavaScript/index.html","hash":"f836ad3596a4b222655b868aa6e172278e356942","modified":1618282454539},{"_id":"public/index.html","hash":"fca8372e070193041898772e7357d9ce06f59ce7","modified":1618282454539},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1618282454539},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1618282454539},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1618282454539},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1618282454539},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1618282454539},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1618282454539},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1618282454539},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1618282454539},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1618282454539},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1618282454539},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1618282454539},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1618282454539},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1618282454539},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1618282454539},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1618282454539},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1618282454539},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1618282454539},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1618282454539},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1618282454539},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1618282454539},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1618282454539},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1618282454539},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1618282454539},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1618282454539},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1618282454539},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1618282454539},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1618282454539},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1618282454539},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1618282454539},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1618282454539},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1618282454539},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1618282454539},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1618282454539},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1618282454539},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1618282454539},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1618282454539},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1618282454539},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1618282454539},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1618282454539},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1618282454539},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1618282454539},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1618282454539},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1618282454539},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1618282454539},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1618282454539},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1618282454539},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1618282454539},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1618282454539},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1618282454539},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1618282454539},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1618282454539},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1618282454539},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1618282454539},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1618282454539},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1618282454539},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1618282454539},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1618282454539},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1618282454539},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1618282454539},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1618282454539},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1618282454539},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1618282454539},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1618282454539},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1618282454539},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1618282454539},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1618282454539},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1618282454539},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1618282454539},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1618282454539},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1618282454539},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1618282454539},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1618282454539},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1618282454539},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1618282454539},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1618282454539},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1618282454539},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1618282454539},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1618282454539},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1618282454539},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1618282454539},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1618282454539},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1618282454539},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1618282454539},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1618282454539},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1618282454539},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1618282454539},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1618282454539},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1618282454539},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1618282454539},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1618282454539},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1618282454539},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1618282454539},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1618282454539},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1618282454539},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1618282454539},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1618282454539},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1618282454539},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1618282454539},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1618282454539},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1618282454539},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1618282454539},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1618282454539},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1618282454539},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1618282454539},{"_id":"source/_posts/日记/mypage.md","hash":"74e070743d6834b151d3c1c52d92dc7f69966d72","modified":1618282772532}],"Category":[{"name":"前端","_id":"cknffl9r40009s8u18gtagxfw"}],"Data":[],"Page":[{"title":"404","date":"2021-04-13T02:47:47.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2021-04-13 10:47:47\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2021-04-13T02:55:58.849Z","path":"404/index.html","_id":"cknffl9qc0000s8u1gphn37e7","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2021-04-12T16:15:40.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-04-13 00:15:40\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2021-04-13T02:55:58.851Z","path":"about/index.html","_id":"cknffl9qi0002s8u12528avky","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-04-12T16:12:15.000Z","type":"categories","layout":"categories","_content":"\n## 木留\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-04-13 00:12:15\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n## 木留\n","updated":"2021-04-13T02:55:58.851Z","path":"categories/index.html","_id":"cknffl9qj0003s8u1dh1o294j","comments":1,"content":"<h2 id=\"木留\"><a href=\"#木留\" class=\"headerlink\" title=\"木留\"></a>木留</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"木留\"><a href=\"#木留\" class=\"headerlink\" title=\"木留\"></a>木留</h2>"},{"_content":"[\n  {\n    \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\",\n    \"name\": \"码酱\",\n    \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\",\n    \"url\": \"http://luokangyuan.com/\",\n    \"title\": \"前去学习\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/coder.png\",\n    \"name\": \"码农\",\n    \"introduction\": \"这里不隐含扭曲的价值观，而是整合并充盈正能量\",\n    \"url\": \"https://www.90c.vip/\",\n    \"title\": \"前去学习\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/avatar2.png\",\n    \"name\": \"洪卫の博客\",\n    \"introduction\": \"凭寄狂夫书一纸，信在成都万里桥。\",\n    \"url\": \"https://sunhwee.com\",\n    \"title\": \"前去探索\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/avatar.jpg\",\n    \"name\": \"过客~励む\",\n    \"introduction\": \"你现在的努力，是为了以后有更多的选择。\",\n    \"url\": \"https://yafine-blog.cn\",\n    \"title\": \"前去探索\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/avatar5.png\",\n    \"name\": \"Sitoi\",\n    \"introduction\": \"妄想通过成为 Spider-Man 来实现财富自由的程序猿\",\n    \"url\": \"https://sitoi.cn\",\n    \"title\": \"前去探索\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/avatar3.jpeg\",\n    \"name\": \"Five-great\",\n    \"introduction\": \"有事多研究，没事瞎琢磨。(Five-great)\",\n    \"url\": \"http://www.fivecc.cn/\",\n    \"title\": \"前去探索\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/24logo.png\",\n    \"name\": \"A2Data\",\n    \"introduction\": \"武术跨行大数据，用技术推动梦想的落地！\",\n    \"url\": \"https://www.a2data.cn\",\n    \"title\": \"开启跨行之旅\"\n  }\n]\n","source":"data/friends.json","raw":"[\n  {\n    \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\",\n    \"name\": \"码酱\",\n    \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\",\n    \"url\": \"http://luokangyuan.com/\",\n    \"title\": \"前去学习\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/coder.png\",\n    \"name\": \"码农\",\n    \"introduction\": \"这里不隐含扭曲的价值观，而是整合并充盈正能量\",\n    \"url\": \"https://www.90c.vip/\",\n    \"title\": \"前去学习\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/avatar2.png\",\n    \"name\": \"洪卫の博客\",\n    \"introduction\": \"凭寄狂夫书一纸，信在成都万里桥。\",\n    \"url\": \"https://sunhwee.com\",\n    \"title\": \"前去探索\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/avatar.jpg\",\n    \"name\": \"过客~励む\",\n    \"introduction\": \"你现在的努力，是为了以后有更多的选择。\",\n    \"url\": \"https://yafine-blog.cn\",\n    \"title\": \"前去探索\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/avatar5.png\",\n    \"name\": \"Sitoi\",\n    \"introduction\": \"妄想通过成为 Spider-Man 来实现财富自由的程序猿\",\n    \"url\": \"https://sitoi.cn\",\n    \"title\": \"前去探索\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/avatar3.jpeg\",\n    \"name\": \"Five-great\",\n    \"introduction\": \"有事多研究，没事瞎琢磨。(Five-great)\",\n    \"url\": \"http://www.fivecc.cn/\",\n    \"title\": \"前去探索\"\n  },\n  {\n    \"avatar\": \"https://statics.sh1a.qingstor.com/2019/06/01/24logo.png\",\n    \"name\": \"A2Data\",\n    \"introduction\": \"武术跨行大数据，用技术推动梦想的落地！\",\n    \"url\": \"https://www.a2data.cn\",\n    \"title\": \"开启跨行之旅\"\n  }\n]\n","date":"2021-04-13T02:51:36.365Z","updated":"2021-04-13T02:51:36.365Z","path":"data/friends.json","layout":"false","title":"","comments":1,"_id":"cknffl9qj0004s8u18dz55dy6","content":"[{\"avatar\":\"http://image.luokangyuan.com/1_qq_27922023.jpg\",\"name\":\"码酱\",\"introduction\":\"我不是大佬，只是在追寻大佬的脚步\",\"url\":\"http://luokangyuan.com/\",\"title\":\"前去学习\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/coder.png\",\"name\":\"码农\",\"introduction\":\"这里不隐含扭曲的价值观，而是整合并充盈正能量\",\"url\":\"https://www.90c.vip/\",\"title\":\"前去学习\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/avatar2.png\",\"name\":\"洪卫の博客\",\"introduction\":\"凭寄狂夫书一纸，信在成都万里桥。\",\"url\":\"https://sunhwee.com\",\"title\":\"前去探索\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/avatar.jpg\",\"name\":\"过客~励む\",\"introduction\":\"你现在的努力，是为了以后有更多的选择。\",\"url\":\"https://yafine-blog.cn\",\"title\":\"前去探索\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/avatar5.png\",\"name\":\"Sitoi\",\"introduction\":\"妄想通过成为 Spider-Man 来实现财富自由的程序猿\",\"url\":\"https://sitoi.cn\",\"title\":\"前去探索\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/avatar3.jpeg\",\"name\":\"Five-great\",\"introduction\":\"有事多研究，没事瞎琢磨。(Five-great)\",\"url\":\"http://www.fivecc.cn/\",\"title\":\"前去探索\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/24logo.png\",\"name\":\"A2Data\",\"introduction\":\"武术跨行大数据，用技术推动梦想的落地！\",\"url\":\"https://www.a2data.cn\",\"title\":\"开启跨行之旅\"}]","site":{"data":{}},"excerpt":"","more":"[{\"avatar\":\"http://image.luokangyuan.com/1_qq_27922023.jpg\",\"name\":\"码酱\",\"introduction\":\"我不是大佬，只是在追寻大佬的脚步\",\"url\":\"http://luokangyuan.com/\",\"title\":\"前去学习\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/coder.png\",\"name\":\"码农\",\"introduction\":\"这里不隐含扭曲的价值观，而是整合并充盈正能量\",\"url\":\"https://www.90c.vip/\",\"title\":\"前去学习\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/avatar2.png\",\"name\":\"洪卫の博客\",\"introduction\":\"凭寄狂夫书一纸，信在成都万里桥。\",\"url\":\"https://sunhwee.com\",\"title\":\"前去探索\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/avatar.jpg\",\"name\":\"过客~励む\",\"introduction\":\"你现在的努力，是为了以后有更多的选择。\",\"url\":\"https://yafine-blog.cn\",\"title\":\"前去探索\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/avatar5.png\",\"name\":\"Sitoi\",\"introduction\":\"妄想通过成为 Spider-Man 来实现财富自由的程序猿\",\"url\":\"https://sitoi.cn\",\"title\":\"前去探索\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/avatar3.jpeg\",\"name\":\"Five-great\",\"introduction\":\"有事多研究，没事瞎琢磨。(Five-great)\",\"url\":\"http://www.fivecc.cn/\",\"title\":\"前去探索\"},{\"avatar\":\"https://statics.sh1a.qingstor.com/2019/06/01/24logo.png\",\"name\":\"A2Data\",\"introduction\":\"武术跨行大数据，用技术推动梦想的落地！\",\"url\":\"https://www.a2data.cn\",\"title\":\"开启跨行之旅\"}]"},{"title":"tags","date":"2021-04-12T16:15:20.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-04-13 00:15:20\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-04-13T02:55:58.853Z","path":"tags/index.html","_id":"cknffl9qk0005s8u1csv7hys4","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2021-04-12T16:16:20.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2021-04-13 00:16:20\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2021-04-13T02:55:58.852Z","path":"friends/index.html","_id":"cknffl9qk0006s8u1bhwucv3g","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"medias","date":"2021-04-13T02:48:41.000Z","_content":"","source":"medias/index.md","raw":"---\ntitle: medias\ndate: 2021-04-13 10:48:41\n---\n","updated":"2021-04-13T02:55:58.852Z","path":"medias/index.html","_id":"cknffl9ql0007s8u1fqfp01s6","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JavaScript基础教程","date":"2018-09-13T16:12:00.000Z","author":"blinkfox","img":"https://statics.sh1a.qingstor.com/2018/09/14/js.jpg","_content":"\n## 一、JavaScript介绍\n\n[JavaScript][1]是目前所有主流浏览器上唯一支持的脚本语言，这也是早期`JavaScript`的唯一用途。其主要作用是在不与服务器交互的情况下修改`HTML`页面内容，因此其最关键的部分是`DOM`（文档对象模型），也就是`HTML`元素的结构。通过`Ajax`可以使`HTML`页面通过`JavaScript`，在不重新加载页面的情况下从服务器上获取数据并显示，大幅提高用户体验。通过`JavaScript`，使`Web`页面发展成胖客户端成为可能。\n\n### 语言的性质\n\n本节对`JavaScript`的性质做简要介绍，以帮你理解一些疑问。\n\n`JavaScript`和`ECMAScript`（JavaScript versus ECMAScript）\n编程语言称为`JavaScript`，语言标准被称为`ECMAScript`。他们有不同名字的原因是因为“Java”已经被注册为商标（属于Oracle）。目前，只有`Mozilla`被正式允许使用“JavaScript”名称，因为很久以前他们得到一份许可。因此，开放的语言标准拥有不同的名字。当前的`JavaScript`版本是`ECMAScript 6`，`ECMAScript 7`当前是开发版。\n\n`JavaScript`之父，`Brendan Eich`[迅速了创建一门编程语言][2]。（否则，Netscape将使用其他技术）。他借鉴了几门其他语言的一些特性：\n\n- JavaScript借鉴了Java的语法和如何区分原始值和对象。\n- JavaScript的函数设计受Scheme和AWK的启发——他们（的函数）都是第一类（first-class）对象，并且在语言中广泛使用。闭包使他们（函数）变成强大的工具。\n- Self影响了JavaScript独一无二的面向对象编程(OOP)风格。它的核心思想（在这里我们没有提到）非常优雅，基于此创建的语言非常少。但后面会提到一个简单的模式照顾大部分用例。JavaScript面向对象编程的杀手级特性是你可以直接创建对象。不需要先创建类或其他类似的东西。\n- Perl和Python影响了JavaScript字符串，数组和正则表达式的操作。\n\n`JavaScript`在最初的时候并不是一个完善的语言，因此也导致`JavaScript`遗留了很多令人诟病的问题。在开发稍大规模的应用时会显得力不从心，但是由于`JavaScript`本身是一种非常灵活的语言，因此在它的基础上开发程序库比较容易，因此出现了一大批非常优秀的第三方库，如[jQuery][3]，[ExtJS][4]，[underscorejs][5]，[backbone][6]等等，由于这些第三方库，`JavaScript`变得非常简单。其中`jQuery`的使用非常广泛，它大幅简化了`DOM`和`Ajax`，已经成为了很多网站的标配。`jQuery`虽然基于`JavaScript`，但它提供了另外一种编程范式，也就是逻辑式编程，与`SQL`和正则表达式类似。\n\n### JavaScript能做什么\n\n![JavaScript项目在Github所占比例][7]\n\n如上图，`JavaScript`作为[Github][8]上最流行、最火的编程语言，几乎无所不能。这里是[PuYart][9]的关于[`JavaScript`就要统治世界了][10]的文章，可以让我们了解`JavaScript`到底能做什么的一些介绍。\n\n1. Web前端(各种前端工具类库、前端框架、动画效果、数据可视化等)\n2. 服务端开发([Node.js][11])\n3. 移动应用或者`Hybrid App`(Cordova)\n4. 桌面应用([NW.js][12]、[Electron][13])\n5. 游戏([Unity3D][14]、[Cocos2d-js][15]、[Pomelo][16])\n6. VR([JavaScript在VR世界的应用][17])\n7. 硬件、嵌入式物联网等([Tessel：用JavaScript做嵌入式开发][18])\n8. 操作系统([NodeOS][19])\n\n> Atwood's Law: any application that can be written in JavaScript, will eventually be written in JavaScript.(Atwood定律：凡是能用JavaScript写出来的，最终都会用JavaScript写出来。)\n\n## 二、 JavaScript语法\n\n### 语句和表达式\n\n了解`JavaScript`的语法，先来了解两个主要的语法类型：语句和表达式。\n\n- 语句通常是“做某些事情”。程序是一组语句的序列。举个例子，下面声明（创建）一个变量 `foo`：\n\n```javascript\nvar foo;\n```\n\n- 表达式是产生“值”。他们通常位于赋值操作的右边、函数参数等。举个例子：\n\n```javascript\n3 * 7\n```\n\n语句和表达式之间的区别最好通过实例说明，`JavaScript`（像Java）有两种不同的方式实现`if-then-else`。一种是用语句：\n\n```javascript\nvar x;\nif (y >= 0) {\n    x = y;\n} else {\n    x = -y;\n}\n```\n\n另一种是表达式：\n\n```javascript\nvar x = y >= 0 ? y : -y;\n```\n\n你可以将后者作为函数参数（但前者不行）：\n\n```javascript\nmyFunction(y >= 0 ? y : -y)\n```\n\n最后，每当`JavaScript`期待一个语句，你也可以用一个表达式代替。例如：\n\n```javascript\nfoo(bar(7, 1));\n```\n\n`foo(...);`是一个语句（也叫做表达式语句），`bar(7, 1)`则是一个表达式。他们都实现函数调用。\n\n### 流程控制语句和语句块\n\n流程控制语句，其语句体可以是单条语句。举两个例子：\n\n```javascript\nif (obj !== null) obj.foo();\n\nwhile (x > 0) x--;\n```\n\n然而，任何语句总能被语句块代替，花括号包含零或多条语句。因此，你也可以这样写：\n\n```javascript\nif (obj !== null) {\n    obj.foo();\n}\n\nwhile (x > 0) {\n    x--;\n}\n```\n\n为便于程序的阅读和维护，推荐使用后一种方式，即语句块方式。\n\n### 分号\n\n`JavaScript`中的分号是[可选的][20]。但省略（分号）可能会带来意想不到的结果，所以我建议还是写上分号。\n\n正如上面所看到的，分号作为语句的结尾，但语句块不需要。仅有一种情况下你能看到语句块后面有分号——**函数表达式后面的函数体块**。**表达式作为语句的结尾，后面是分号**：\n\n```javascript\nvar x = 3 * 7;\nvar f = function () { };\n```\n\n### 注释\n\n`JavaScript`的注释有两种形式：单行注释和多行注释。单行注释以`//`开头，以换行符结尾：\n\n```javascript\nx++; // 单行（single-line）注释\n```\n\n多行注释用`/**/`包裹\n\n```javascript\n/*\n 这是多行注释\n 多行哦\n */\n```\n\n## 三、变量和赋值\n\n`JavaScript`中的变量在使用前必须先声明，否则会报错引用错误（Reference Error）：\n\n```javascript\nvar foo;  // 声明变量“foo”\n```\n\n### 赋值\n\n你可以在声明变量的同时为其赋值：\n\n```javascript\nvar foo = 6;\n```\n\n你也可以给已经存在的变量重新赋值：\n\n```javascript\nfoo = 4;  // 更改变量的值\n```\n\n### 复合赋值操作符\n\n有很多复合赋值操作符，例如+=。下面的两个赋值操作等价：\n\n```javascript\nx += 1;\nx = x + 1;\n```\n\n### 标识符和变量名\n\n标识符就是事物的名字，在`JavaScript`中他们扮演不同的语法角色。例如，变量的名称是一个标识符。\n\n大体上，标识符的第一个字符可以是任何`Unicode`字符、美元标志符（$）或下划线（_）。后面可以是任意字符和数字。因此，下面全是合法的标识符：\n\n```javascript\narg0\n_tmp\n$elem\nπ\n```\n\n> **注意**：首字符不能是数字，如果是数字的话，该如何区分是数字还是变量呢？\n\n一些标识符是“保留关键字”——他们是语法的一部分，不能用作变量名。从技术上讲，下面三个标识符不是保留字，但也不应该作为变量名：\n\n```javascript\nInfinity NaN undefined\n```\n\n## 四、值\n\n`JavaScript`有所有我们期待的编程语言值类型：布尔，数字，字符串，数组等。`JavaScript`中的所有值都有属性。每个属性有一个键（或名字）和一个值。你可以使用点（.）操作符读取属性：\n\n```javascript\nvalue.propKey\n```\n\n举个例子：字符串`abc`有属性`lenght`（长度）\n\n```javascript\nvar str = 'abc';\nconsole.log(str.length); // 得到3\n```\n\n上面的代码也可以写成下面这样：\n\n```javascript\n'abc'.length // 得到3\n```\n\n点操作符也可以用来给属性赋值：\n\n```javascript\nvar obj = {};  // 空对象\nobj.foo = 123; // 创建属性“foo”，设置它为123\nconsole.log(obj.foo); // 得到123\n```\n\n你也可以通过它（.）调用方法：\n\n```javascript\n'hello'.toUpperCase(); // 得到HELLO\n```\n\n上面，我们在值`hello`上面调用方法`toUpperCase()`。\n\n### 原始类型值和对象\n\nJavaScript定义了不同值之间的区别：\n\n- 原始值包括：`boolean`，`number`，`string`，`null`和`undefined`。\n- 所有其他的值都是对象。实际上对象被定义为——所有不为原始值的值。\n\n两者之间的主要区别在于他们是如何被比较的：每一个对象有一个独一无二的标志，并且仅和自己相等：\n\n```javascript\nvar obj1 = {};  // 一个空对象\nvar obj2 = {};  // 另一个空对象\nobj1 === obj2   // false\nobj1 === obj1   // true\n```\n\n相反，所有原始值只要编码值相同就被认为是相同的：\n\n```javascript\nvar prim1 = 123;\nvar prim2 = 123;\nprim1 === prim2 // true\n```\n\n### 原始类型值\n\n下面全是原始类型值（简称：原始值）：\n\n- 布尔类型：true，false\n- 数字类型：1736，1.351\n- 字符串类型: ‘abc’，”abc”\n- 两个“无值（non-values）”：undefined，null\n原始值的特征：\n\n- **值做比较时,“内容”做比较**。\n\n```javascript\n3 === 3 // true\n'abc' === 'abc' // true\n```\n\n- **无法更改**：值的属性无法更改，无法添加和移除属性，获取未知属性总返回undefined。\n\n```javascript\nvar str = 'abc';\nstr.foo = 3; // try to create property `foo` ⇒ no effect\nstr.foo  // unknown property ⇒  undefined\n```\n\n### 对象\n\n#### 对象的类型\n\n所有非原始值的值都是对象。最常见的几种对象类型是：\n\n- 简单对象（类型是`Object`）能通过对象字面量创建：\n\n```javascript\n{\n    firstName: ‘Jane’,\n    lastName: ‘Doe’\n}\n```\n\n上面的对象有两个属性：`firstName`属性的值是“Jane”，`lastName`属性的值是“Doe”。\n\n- 数组（类型是`Array`）能通过数组字面量创建：\n\n```javascript\n[ ‘apple’, ‘banana’, ‘cherry’ ]\n```\n\n上面的数组有三个元素，可以通过数字索引访问。例如“apple”的索引是0。\n\n- 正则表达式对象（类型是`RegExp`）能通过正则表达式字面量创建。\n\n```javascript\n/^a+b+$/\n```\n\n#### 对象的特征\n\n- **比较的是引用**：比较的是标识符，每个值有自己的标识符。\n\n```javascript\n{} === {}  // 两个不同的空对象, false\nvar obj1 = {};\nvar obj2 = obj1;\nobj1 === obj2   // true\n```\n\n- **默认可以更改**。\n\n```javascript\nvar obj = {};\nobj.foo = 123;\nobj.foo //123\n```\n\n所有的数据结构（如数组）都是对象，但并不是所有的对象都是数据结构。例如：正则表达式是对象，但不是数据结构。\n\n### undefined 和 null\n\n`JavaScript`有两个“无值）”：`undefined`和`null`。\n\n`undefined`的意思是“没有值”。未初始化的变量是`undefined`：\n\n```javascript\nvar foo;\nfoo // undefined\n```\n\n读取不存在的属性时，将返回`undefined`：\n\n```javascript\n  > var obj = {}; // 空对象\n  > obj.foo // undefined\n```\n\n缺省的参数也是`undefined`：\n\n```javascript\nfunction f(x) {\n    return x;\n}\nf(); //undefined\n```\n\n`null`的意思是“没有对象”。它被用来表示对象的无值（参数，链上的对象等）。\n\n通常情况下你应该把`undefined`和`null`看成是等价的，如果他们代表相同意义的无值的话。检查他们的一种方式是通过严格比较：\n\n```javascript\nif (x === undefined || x === null) {\n    ...\n}\n```\n\n另一种在实际中使用的方法是认为undefined 和 null 都是false：\n\n```javascript\nif (!x) {\n    ...\n}\n```\n\n> **警告**：false，0，NaN 和 “” 都被当作false。\n\n### 包装类型\n\n对象类型的实例`Foo`（包括内建类型，例如Array和其他自定义类型）从对象`Foo.prototype`上获取方法。你可以通过读取这个方法的方式（不是调用）验证这点：\n\n```javascript\n[].push === Array.prototype.push  // true\n```\n\n相反，**原始类型是没有类型的，所以每个原始类型有一个关联类型，称之为包装类型**：\n\n- 布尔值的包装类型是 Boolean。布尔值从Boolean.prototype上获取方法：\n\n```javascript\n  > true.toString === Boolean.prototype.toString    //true\n```\n\n> 注意：包装类型名字的首字母是大写的B。如果在JavaScript中布尔值的类型可以访问，那么它可能会被转换为布尔对象。\n\n- 数字值的包装类型是`Number`。\n- 字符串值的包装类型是`String`。\n\n包装类型也有实例（他们的实例是对象），但不常用。相反，包装类型有其他用处：**如果你将他们作为函数调用，他们可以将值转换为原始类型**。\n\n```javascript\nNumber('123') //123\nString(true)  //'true'\n```\n\n### 通过typeof和instanceof将值分类\n\n有两个操作符可以用来将值分类：`typeof`主要用于原始值，`instanceof`主要用于对象。\n\n#### typeof 使用方法如下：\n\n`typeof «value»`\n\n`typeof`返回描述`value`“类型”的一个字符串。例如：\n\n```javascript\ntypeof true //'boolean'\ntypeof 'abc' //'string'\ntypeof {} // 空对象字面量,'object'\ntypeof [] // 空数组字面量,'object'\n```\n\n下面列出了`typeof`操作的所有结果：\n\n```\n操作数 结果\nundefined\t'undefined'\nnull\t'object'\nBoolean value\t'boolean'\nNumber value\t'number'\nString value\t'string'\nFunction\t'function'\nAll other values\t'object'\n```\n\n有两个结果和我们上面说的的原始值与对象是矛盾的：\n\n- 函数的类型是`function`而不是`object`。因为函数（类型为“function”）是对象（类型是对象）的子类型，这不是一个错误。\n- `null`的类型是`object`。这是一个bug，但从没被修复，因为修复后会破坏现有的代码。\n\n#### instanceof使用方法如下：\n\n`«value» instanceof «Constr»`\n\n如果`value`是一个对象，并且`value` 是由构造函数`Constr`创建的（参考：类）。例如：\n\n```javascript\nvar b = new Bar();  // 通过构造函数Bar创建对象\nb instanceof Bar    //true\n{} instanceof Object    //true\n[] instanceof Array //true\n```\n\n### 深入阅读\n\n- [探索JavaScript中Null和Undefined的深渊][21]\n\n## 五、布尔\n\n布尔类型原始值包括`true`和`false`。下面的操作符会得到布尔值：\n\n- 二元逻辑运算符：&&（与），||（或）\n- 前缀逻辑运算符：!（非）\n- 等值运算符：=== !== == !=\n- 比较运算符（字符串或数字）：> >= < <=\n\n### 真值和假值\n\n每当`JavaScript`希望一个布尔值时（例如：if语句的条件），可以使用任何值。它将被理解（转换）为`true`或`false`。下面的值被理解为`false`：\n\n- undefined, null\n- 布尔: false\n- 数字: 0, NaN\n- 字符串: ‘’\n\n所有其他值被认为`true`。被理解为`false`的值称为假值，被理解为`true`的值称为真值。可以使用`Boolean`作为函数，测试值被理解为什么。\n\n```javascript\nBoolean(undefined)  //false\nBoolean(0)    //false\nBoolean(3)    //true\n```\n\n### 二元逻辑运算符\n\n`JavaScript`中的**二元逻辑运算符是短路运算**——如果第一个操作数可以确定结果，第二个操作数将不被验证（运算）。例如，在下面的代码中，函数`foo()`永远不会被调用。\n\n```javascript\nfalse && foo()\ntrue || foo()\n```\n\n此外，**二元逻辑运算符会返回操作数中的一个**，可能是一个布尔值，也可能不是。\n\n- **与**：如果第一个操作数是假值，返回第一个。否则返回第二个操作数。\n\n```javascript\nNaN && 'abc'    //NaN\n123 && 'abc'    //'abc'\n```\n\n- **或**：如果第一个操作数是真值，返回第一个。否则，返回第二个操作数。\n\n```javascript\n'abc' || 123    //'abc'\n'' || 123   //123\n```\n\n### 等值运算符\n\n在`JavaScript`中检测相等，你可以使用严格相等（`===`）和严格不等（`!==`）。或者你也可以使用非严格相等（`==`）和非严格不等（`!=`）。\n\n> **经验规则：总是用严格运算符，假装非严格运算符不存在。严格相等更安全。**\n\n### 深入阅读\n\n- [在JavaScript中什么时候使用==是正确的？][22]\n\n## 六、数字\n\n`JavaScript`中的**所有数字都是浮点型**（虽然大部分的JavaScript引擎内部也使用整数）。至于为什么这样设计，查看这里（[每一个JavaScript开发者应该了解的浮点知识][23]）。\n\n```javascript\n1 === 1.0   //true\n```\n\n特殊数字：\n\n- `NaN` (“不是一个数字 not a number”): 错误值。\n\n```javascript\nNumber('xyz')  // 'xyz' 不能被转换为数字得到:NaN\n```\n\n- `Infinity`：也是最大错误值（无穷大）\n\n```javascript\n3 / 0   //Infinity\nMath.pow(2, 1024)  // 数字太大了,得到Infinity\n```\n\n`Infinity`有时很有用，因为它比任何其他数字都大。同样，`-Infinity` 比其他任何数字都小。\n\n- `JavaScript`有两个零，`+0`和`-0`。它（js引擎）通常不让你看到，并简单将两个零都显示为0：\n\n```javascript\n+0  //0\n-0  //0\n```\n\n因此最好假装只有一个零（正如我们看到假值时所做的那样：**-0 和 +0 都是假值**）。\n\n### 运算符\n\n`JavaScript`中有下列算数运算符：\n\n```javascript\n加: number1 + number2\n减: number1 - number2\n乘: number1 * number2\n除: number1 / number2\n模: number1 % number2\n自增: ++variable, variable++\n自减: –variable, variable–\n负值: -value\n正值（转换为数字）: +value\n```\n\n全局对象`Math`通过函数提供更多算数运算操作。\n\n`JavaScript`中也有位运算符（例如：&）。\n\n## 七、字符串\n\n字符串可以直接通过字符串字面量创建。这些字面量被单引号或双引号包裹。反斜线（\\）转义字符并且产生一些控制字符。例如：\n\n```javascript\n'abc'\n\"abc\"\n\n'Did she say \"Hello\"?'\n\"Did she say \\\"Hello\\\"?\"\n\n'That\\'s nice!'\n\"That's nice!\"\n\n'Line 1\\nLine 2'  // 换行\n'Backlash: \\\\'\n```\n\n可以通过方括号访问单个字符：\n\n```javascript\nvar str = 'abc';\nstr[1]    //'b'\n```\n`length`属性是字符串的字符数量。\n\n```javascript\n'abc'.length  //3\n```\n\n> **提醒**：字符串是不可变的，如果你想改变现有字符串，你需要创建一个新的字符串。\n\n### 字符串运算符\n\n字符串可以通过加号操作符（+）拼接，如果其中一个操作数为字符串，会将另一个操作数也转换为字符串。\n\n```javascript\nvar msgCount = 3;\n'You have '+ msgCount + ' messages' //'You have 3 messages'\n```\n\n连续执行拼接操作可以使用`+=`操作符：\n\n```javascript\nvar str = '';\nstr += 'Multiple ';\nstr += 'pieces ';\nstr += 'are concatenated.';\nconsole.log(str); //'Multiple pieces are concatenated.'\n```\n\n### 字符串方法\n\n字符串有许多有用的方法。例如：\n\n```javascript\n'abc'.slice(1)  // 复制子字符串,得到索引1及其之后的字符串，即：'bc'\n'abc'.slice(1, 2)   //得到索引1和2之间的字符串，即：'b'\n\n'\\t xyz  '.trim()  // 移除空白字符，即：'xyz'\n\n'mjölnir'.toUpperCase()   //转成大写，即：'MJÖLNIR'\n\n'abc'.indexOf('b')  // 查找第一个b的索引，即：1\n'abc'.indexOf('x')    //没有返回-1\n```\n\n## 八、语句\n\n### 条件（Conditionals）\n`if`语句通过布尔条件决定执行那个分支：\n\n```javascript\nif (myvar === 0) {\n    // then\n}\n\nif (myvar === 0) {\n    // then\n} else {\n    // else\n}\n\nif (myvar === 0) {\n    // then\n} else if (myvar === 1) {\n    // else-if\n} else if (myvar === 2) {\n    // else-if\n} else {\n    // else\n}\n```\n\n下面的`switch`语句，furit的值决定那个分支被执行。\n\n```javascript\nswitch (fruit) {\n    case 'banana':\n        // ...\n        break;\n    case 'apple':\n        // ...\n        break;\n    default:  // 所有其他情况\n        // ...\n}\n```\n\n### 循环（Loops）\n\nfor 循环的格式如下：\n\n```javascript\nfor(初始化; 当条件成立时循环; 下一步操作)\n```\n\n例子：\n\n```javascript\nfor (var i=0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n```\n\n当条件成立时`while`循环继续循环它的循环体。\n\n```javascript\n// 和上面的for循环相等\nvar i = 0;\nwhile (i < arr.length) {\n    console.log(arr[i]);\n    i++;\n}\n```\n\n当条件成立时，`do-while`循环继续循环。由于条件位于循环体之后，所以循环体总是被至少至少执行一次。\n\n```javascript\ndo {\n    // ...\n} while(条件);\n```\n\n在所有的循环中：\n\n- break中断循环\n- continue开始一个新的循环迭代\n\n## 九、函数\n\n定义函数的一种方法是通过函数声明：\n\n```javascript\nfunction add(param1, param2) {\n    return param1 + param2;\n}\n```\n\n上面的代码定义一个名称叫做`add`的函数，有两个参数`param1`和`param2`，并且返回参数的和。下面是如何调用这个函数：\n\n```javascript\nadd(6, 1)   //7\nadd('a', 'b')   //'ab'\n```\n\n另一种定义`add()`函数的方法是通过函数表达式：\n\n```javascript\nvar add = function (param1, param2) {\n    return param1 + param2;\n};\n```\n\n函数表达式产生一个值，因此可以直接将函数作为参数传递给其他函数：\n\n```javascript\nsomeOtherFunction(function (p1, p2) { ... });\n```\n\n### 函数声明提升\n\n函数声明会被提升，他们全被移动到当前作用域开始之处。这允许你在函数声明之前调用它们：\n\n```javascript\nfunction foo() {\n    bar();  // 没问题，bar被提升\n    function bar() {\n        ...\n    }\n}\n```\n\n> **注意**：虽然变量声明也会被提升，但赋值的过程不会被提升：\n\n```javascript\nfunction foo() {\n    bar();  // 有问题，bar是undefined\n    var bar = function () {\n        // ...\n    };\n}\n```\n\n### 特殊变量参数\n\n**在`JavaScript`中你可以调用任意函数并传递任意数量的参数**——语言绝不会“抱怨”（参数检测）。都可以正常工作，然而，使所有参数可访问需要通过特殊变量`arguments`。`arguments`看起来像数组，但它没有数组的方法（称为类数组 array-like）。\n\n```javascript\nfunction f() { return arguments }\nvar args = f('a', 'b', 'c');\nargs.length //3\nargs[0]  // 获取索引为0的元素,'a'\n```\n\n### 太多或太少参数\n\n让我们通过下面的函数探索`JavaScript`中传递太多或太少参数时如何处理\n\n```javascript\nfunction f(x, y) {\n    console.log(x, y);\n}\n```\n\n多出的参数将被忽略（可以通过`arguments`访问）：\n\n```javascript\nf('a', 'b', 'c')    //a b\n```\n\n缺少的参数将会是`undefined`：\n\n```javascript\nf('a')    //a undefined\nf() //undefined undefined\n```\n\n### 可选参数\n\n下面是一个常见模式，给参数设置默认值：\n\n```javascript\nfunction pair(x, y) {\n    x = x || 0;  // (*)\n    y = y || 0;\n    return [ x, y ];\n}\n```\n\n在`（*）`这行，如果x是真值（除了：`null`，`undefined` 等），\t \t操作符返回x。否则，它返回第二个操作数。\n\n```javascript\npair()  //[ 0, 0 ]\npair(3) //[ 3, 0 ]\npair(3, 5)  //[ 3, 5 ]\n```\n\n### 强制数量\n\n如果你想强制参数的数量，你可以检测`arguments.length`：\n\n```javascript\nfunction pair(x, y) {\n    if (arguments.length !== 2) {\n        throw new Error('Need exactly 2 arguments');\n    }\n    ...\n}\n```\n\n### 将arguments 转换为数组\n\n`arguments`不是一个数组，它仅仅是类数组（array-like）：它有一个`length`属性，并且你可以通过方括号索引方式访问它的元素。然而，你不能移除元素，或在它上面调用任何数组方法。因此，有时你需要将其转换为数组。这就是下面函数的作用。\n\n```javascript\nfunction toArray(arrayLikeObject) {\n    return [].slice.call(arrayLikeObject);\n}\n```\n\n## 十、异常处理\n\n[异常处理][24]最常见的方式像下面这样：\n\n```javascript\nfunction throwException() {\n    throw new Error('Problem!');\n}\n\ntry {\n    throwException();\n} catch (e) {\n    console.log(e);  // 错误：信息\n    console.log(e.stack);  // 非标准，但大部分浏览器支持\n}\n```\n\ntry分支包裹易出错的代码，如果try分支内部抛出异常，catch分支将会执行。\n\n## 十一、严格模式\n\n严格模式开启检测和一些其他措施，使`JavaScript`变成更整洁的语言。推荐使用严格模式。为了开启严格模式，只需在`JavaScript`文件或`script`标签第一行添加如下语句：\n\n```javascript\n'use strict';\n```\n\n你也可以在每个函数上选择性开启严格模式，只需将上面的代码放在函数的开头：\n\n```javascript\nfunction functionInStrictMode() {\n    'use strict';\n}\n```\n\n下面的两小节看下严格模式的三大好处。\n\n### 明确错误\n\n让我们看一个例子，严格模式给我们明确的错误，否则`JavaScript`总是静默失败：下面的函数`f()` 执行一些非法操作，它试图更改所有字符串都有的只读属性——`length`：\n\n```javascript\nfunction f() {\n    'abc'.length = 5;\n}\n```\n\n当你调用上面的函数，它静默失败，赋值操作被简单忽略。让我们将`f()`在严格模式下运行：\n\n```javascript\nfunction f_strict() {\n    'use strict';\n    'abc'.length = 5;\n}\n```\n\n现在浏览器报给我们一些错误：\n\n```javascript\nf_strict()  // TypeError: Cannot assign to read only property 'length' of abc\n```\n\n### 不是方法的函数中的this\n\n在严格模式下，不作为方法的函数中的`this`值是`undefined`：\n\n```javascript\nfunction f_strict() {\n    'use strict';\n    return this;\n}\nconsole.log(f_strict() === undefined);  // true\n```\n\n在非严格模式下，`this`的值是被称作全局对象（`global object`）（在浏览器里是`window`）：\n\n```javascript\nfunction f() {\n    return this;\n}\nconsole.log(f() === window);  // true\n```\n\n### 不再自动创建全局变量\n\n在非严格模式下，如果你给不存在的变量赋值，`JavaScript`会自动创建一个全局变量：\n\n```javascript\nfunction f() { foo = 5 }\nf()  // 不会报错\nfoo // 5\n```\n在严格模式下，这会产生一个错误：\n\n```javascript\nfunction f_strict() { 'use strict'; foo2 = 4; }\nf_strict()  // ReferenceError: foo2 is not defined\n```\n\n### 深入阅读\n\n- [揭秘javascript中谜一样的this][25]\n- [JavaScript中的this关键字][26]\n\n## 十二、变量作用域和闭包\n\n在`JavaScript`中，你必须使用变量之前，通过`var`声明变量：\n\n```javascript\nvar x;\nx = 3;\ny = 4;  // ReferenceError: y is not defined\n```\n\n你可以用一条`var`语句声明和初始化多个变量：\n\n```javascript\nvar x = 1, y = 2, z = 3;\n```\n\n但我建议每个变量使用一条语句。因此，我将上面的语句重写为：\n\n```javascript\nvar x = 1;\nvar y = 2;\nvar z = 3;\n```\n\n由于提升（见下文），最好在函数顶部声明变量。\n\n### 变量和函数作用域\n\n变量的作用域总是整个函数（没有块级作用域）。例如：\n\n```javascript\nfunction foo() {\n    var x = -3;\n    if (x < 0) {  // (*)\n        var tmp = -x;\n        ...\n    }\n    console.log(tmp);  // 3\n}\n```\n\n我们可以看到tmp变量不仅在（*）所在行的语句块存在，它在整个函数内都存在。\n\n### 变量提升\n\n变量声明会被提升：声明会被移到函数的顶部，但赋值过程不会。举个例子，在下面的函数中`（*）`行位置声明了一个变量。\n\n```javascript\nfunction foo() {\n    console.log(tmp); // undefined\n    if (false) {\n        var tmp = 3;  // (*)\n    }\n}\n```\n\n在内部，上面的函数被执行像下面这样：\n\n```javascript\nfunction foo() {\n    var tmp;  // declaration is hoisted\n    console.log(tmp);\n    if (false) {\n        tmp = 3;  // assignment stays put\n    }\n}\n```\n\n### 闭包\n\n每个函数保持和函数体内部变量的连接，甚至离开创建它的作用域之后。例如：\n\n```javascript\nfunction createIncrementor(start) {\n    return function () {  // (*)\n        return start++;\n    }\n}\n```\n\n在`（*）`行开始的函数在它创建时保留上下文，并在内部保存一个`start`活动值：\n\n```javascript\nvar inc = createIncrementor(5);\ninc()   // 5\ninc() // 6\ninc()   // 7\n```\n\n闭包是一个函数加上和其作用域链的链接。因此，`createIncrementor()`返回的是一个闭包。\n\n### IIFE：模拟块级作用域\n\n有时你想模拟一个块，例如你想将变量从全局作用域隔离。完成这个工作的模式叫做 `IIFE`(立即执行函数表达式(`Immediately Invoked Function Expression`))：\n\n```javascript\n(function () {  // 块开始\n    var tmp = ...;  // 非全局变量\n}());  // 块结束\n```\n\n上面你会看到函数表达式被立即执行。外面的括号用来阻止它被解析成函数声明；只有函数表达式能被立即调用。函数体产生一个新的作用域并使`tmp`变为局部变量。\n\n### 闭包实现变量共享\n\n下面是个经典问题，如果你不知道，会让你费尽思量。因此，先浏览下，对问题有个大概的了解。\n\n闭包保持和外部变量的连接，有时可能和你想像的行为不一致：\n\n```javascript\nvar result = [];\nfor (var i=0; i < 5; i++) {\n    result.push(function () { return i });  // (*)\n}\nconsole.log(result[1]()); // 5 (不是 1)\nconsole.log(result[3]()); // 5 (不是 3)\n```\n\n`(*)`行的返回值总是当前的i值，而不是当函数被创建时的i值。当循环结束后，i的值是5，这是为什么数组中的所有函数的返回值总是一样的。如果你想捕获当前变量的快照，你可以使用`IIFE`：\n\n```javascript\nfor (var i=0; i < 5; i++) {\n    (function (i2) {\n        result.push(function () { return i2 });\n    }(i));  // 复制当前的i\n}\n```\n\n深入阅读\n\n- [认识javascript中的作用域和上下文][27]\n- [JavaScript的作用域和提升机制][28]\n- [了解JavaScript的执行上下文][29]\n\n## 十三、对象和继承\n\n和所有的值类型一样，对象有属性。事实上，你可以将对象当作一组属性的集合，每个属性都是一对（键和值）。键是字符串，值可以是任意`JavaScript`值。到目前为止，我们仅仅见过键是标识符的属性，因为点操作符处理的键必须为标识符。在这节，你讲见到另一种访问属性的方法，能将任意字符串作为键。\n\n### 单个对象\n在`JavaScript`中，你可以直接创建对象，通过对象字面量：\n\n```javascript\nvar jane = {\n    name: 'Jane',\n\n    describe: function () {\n        'use strict';\n        return 'Person named '+this.name;\n    }\n};\n```\n\n上面的对象有两个属性：`name`和`describe`。你能读（“get”）和 写（“set”）属性：\n\n```javascript\njane.name  // get，'Jane'\njane.name = 'John';  // set\njane.newProperty = 'abc';  // 自动创建\n```\n\n属性是函数如`describe`可以被当作方法调用。当调用他们时可以在它们内部通过this引用对象。\n\n```javascript\njane.describe()  // 调用方法,'Person named John'\njane.name = 'Jane';\njane.describe() // 'Person named Jane'\n```\n\n`in`操作符用来检测一个属性是否存在：\n\n```javascript\n'newProperty' in jane   // true\n'foo' in jane   // false\n```\n\n若读取一个不存在的属性，将会得到`undefined`值。因此上面的两个检查也可以像下面这样：\n\n```javascript\njane.newProperty !== undefined  // true\njane.foo !== undefined  // false\n```\n\n`delete`操作符用来删除一个属性：\n\n```javascript\ndelete jane.newProperty //true\n'newProperty' in jane   //false\n```\n\n### 任意键属性\n\n属性的键可以是任意字符串。到目前为止，我们看到的对象字面量中的和点操作符后的属性关键字。按这种方法你只能使用标识符。如果你想用其他任意字符串作为键名，你必须在对象字面量里加上引号，并使用方括号获取和设置属性。\n\n```javascript\nvar obj = { 'not an identifier': 123 };\nobj['not an identifier']    //123\nobj['not an identifier'] = 456;\n```\n\n方括号允许你动态计算属性关键字：\n\n```javascript\nvar x = 'name';\njane[x]; // 'Jane'\njane['na'+'me']; // 'Jane'\n```\n\n### 引用方法\n\n如果你引用一个方法，它将失去和对象的连接。就其本身而言，函数不是方法，其中的`this`值为`undefined`（严格模式下）。\n\n```javascript\nvar func = jane.describe;\nfunc()  // TypeError: Cannot read property 'name' of undefined\n```\n\n解决办法是使用函数内置的`bind()`方法。它创建一个新函数，其`this`值固定为给定的值。\n\n```javascript\nvar func2 = jane.describe.bind(jane);\nfunc2() // 'Person named Jane'\n```\n\n### 方法内部的函数\n\n每个函数都有一个特殊变量`this`。如果你在方法内部嵌入函数是很不方便的，因为你不能从函数中访问方法的`this`。下面是一个例子，我们调用`forEach`循环一个数组：\n\n```javascript\nvar jane = {\n    name: 'Jane',\n    friends: [ 'Tarzan', 'Cheeta' ],\n    logHiToFriends: function () {\n        'use strict';\n        this.friends.forEach(function (friend) {\n            // 这里的“this”是undefined\n            console.log(this.name + ' says hi to ' + friend);\n        });\n    }\n}\n```\n\n调用`logHiToFriends`会产生错误：\n\n```javascript\njane.logHiToFriends()   // TypeError: Cannot read property 'name' of undefined\n```\n\n有两种方法修复这问题。\n\n- 将`this`存储在不同的变量。\n\n```javascript\nlogHiToFriends: function () {\n    'use strict';\n    var that = this;\n    this.friends.forEach(function (friend) {\n        console.log(that.name + ' says hi to ' + friend);\n    });\n}\n```\n\n- forEach的第二个参数允许提供`this`值。\n\n```javascript\nlogHiToFriends: function () {\n    'use strict';\n    this.friends.forEach(function (friend) {\n        console.log(this.name + ' says hi to ' + friend);\n    }, this);\n}\n```\n\n在`JavaScript`中函数表达式经常被用作函数参数。时刻小心函数表达式中的`this`。\n\n### 构造函数：对象工厂\n\n除了作为“真正”的函数和方法，函数还在JavaScript中扮演第三种角色：**如果通过new操作符调用，他们会变为构造函数，对象的工厂**。构造函数是对其他语言中的类的粗略模拟。约定俗成，构造函数的第一个字母大写。例如：\n\n```javascript\n// 设置实例数据\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n// 方法\nPoint.prototype.dist = function () {\n    return Math.sqrt(this.x*this.x + this.y*this.y);\n};\n```\n\n我们看到构造函数分为两部分：首先，`Point`函数设置实例数据。其次，`Point.prototype`属性包含对象的方法。前者的数据是每个实例私有的，后面的数据是所有实例共享的。\n\n我们通过new操作符调用`Point`：\n\n```javascript\nvar p = new Point(3, 5);\np.x //3\np.dist();    //5.830951894845301\n```\n\np是`Point`的一个实例：\n\n```javascript\np instanceof Point  //true\ntypeof p    //'object'\n```\n\n### 深入阅读\n\n- [Javascript继承 原型的陷阱][30]\n- [Javascript 封装问题][31]\n\n## 十四、数组\n\n数组是数组元素的序列，能通过整数索引方法数组元素，数组索引从0开始。\n\n### 数组字面量\n数组字面量创建数组很方便：\n\n```javascript\n> var arr = [ 'a', 'b', 'c' ];\n```\n\n上面的数组有三个元素：分别是字符串“a”，“b”， “c”。你可以通过整数索引访问它们：\n\n```javascript\narr[0]  //'a'\narr[0] = 'x';\narr\n// [ 'x', 'b', 'c' ]\n```\n\n`length`属性总表示一个数组有多少项元素。\n\n```javascript\narr.length    //3\n```\n\n除此之外它也可以用来从数组上移除尾部元素：\n\n```javascript\narr.length = 2;\narr // [ 'x', 'b' ]\n```\n\n`in`操作符也可以在数组上工作。\n\n```javascript\n1 in arr // arr在索引为1处是否有元素？,true\n5 in arr // arr在索引为5处是否有元素？false\n```\n\n值得注意的是数组是对象，因此可以有对象属性：\n\n```javascript\narr.foo = 123;\narr.foo   // 123\n```\n\n### 数组方法\n\n数组有许多方法。举些例子：\n\n```javascript\nvar arr = [ 'a', 'b', 'c' ];\n\narr.slice(1, 2)  // 复制元素，[ 'b' ]\narr.slice(1)    // [ 'b', 'c' ]\n\narr.push('x')  // 在末尾添加一个元素，4\narr // [ 'a', 'b', 'c', 'x' ]\n\narr.pop()  // 移除最后一个元素，'x'\narr   // [ 'a', 'b', 'c' ]\n\narr.shift()  // 移除第一个元素，'a'\narr // [ 'b', 'c' ]\n\narr.unshift('x')  // 在前面添加一个元素，3\narr // [ 'x', 'b', 'c' ]\n\narr.indexOf('b')  // 查找给定项在数组中的索引，若不存在返回-1，\n// 1\narr.indexOf('y')  // -1\n\narr.join('-')  // 将元素拼接为一个字符串，'x-b-c'\narr.join('')    // 'xbc'\narr.join()  // 'x,b,c'\n```\n\n### 遍历数组\n\n有几种方法可以遍历数组元素。其中两个最重要的是`forEach`和`map`。\n\n`forEach`遍历整个数组，并将当前元素和它的索引传递给一个函数：\n\n```javascript\n[ 'a', 'b', 'c' ].forEach(function (elem, index) {  // (*)\n    console.log(index + '. ' + elem);\n});\n```\n\n上面代码的输出\n\n```javascript\n0. a\n1. b\n2. c\n```\n\n注意`（*）`行的函数参数是可省略的。例如：它可以只有一个参数`elem`。\n\n`map`创建一个新数组，通过给每个存在数组元素应用一个函数：\n\n```javascript\n[1,2,3].map(function (x) {\n    return x*x\n});\n// [ 1, 4, 9 ]\n```\n\n### 深入阅读\n\n- [有趣的javascript原生数组函数][32]\n\n## 十五、正则表达式\n\n`JavaScript`内建支持正则表达式。他们被双斜线分隔：\n\n```javascript\n/^abc$/\n/[A-Za-z0-9]+/\n```\n\n### 方法 test()：测试是否匹配\n\n```javascript\n/^a+b+$/.test('aaab')   // true\n/^a+b+$/.test('aaa')    // false\n```\n\n### 方法 exec()：匹配和捕获组\n\n```javascript\n/a(b+)a/.exec('_abbba_aba_')    // [ 'abbba', 'bbb' ]\n```\n\n返回的数组第一项（索引为0）是完整匹配，捕获的第一个分组在第二项（索引为1），等。有一种方法可以反复调用获取所有匹配。\n\n### 方法 replace()：搜索并替换\n\n```javascript\n'<a> <bbb>'.replace(/<(.*?)>/g, '[$1]') // '[a] [bbb]'\n```\n\n`replace`的第一个参数必须是正则表达式，并且开启全局搜索（`/g`标记），否则仅第一个匹配项会被替换。有一种方法使用一个函数来计算替换项。\n\n## 十六、数学\n\n[Math][33]是一个有算数功能的对象。例如：\n\n```javascript\nMath.abs(-2) // 2\nMath.pow(3, 2) // 3^2 = 9\nMath.max(2, -1, 5) //5\nMath.round(1.9) // 2\nMath.cos(Math.PI)  // 预定义常量π，-1\n```\n\n## 十七、标准库的其他功能\n\n`JavaScript`标准库相对简单，但有很多其他东西你可以使用：\n\n[Date][34]：日期构造函数，主要功能有转换和创建日期字符串，访问日期组成部分（年，小时等）。\n[JSON][35]：一个对象，功能是转换和生成`JSON`数据。\n[console.*][36]方法：浏览器的具体方法，不是语言成分的部分，但他们也可以在[Node.js][37]中工作。\n\n## 十八、下一步学什么？\n\n在你学会了这篇文章的基础教程后，你可以转到大部分章节末尾提到的高级教程。此外，我建议你看下面的资源：\n\n- Style guides: I have written [a guide to style guides][38]\n- [Underscore.js][39]: 一个弥补JavaScript标准库缺少的功能的库\n- [JSbooks – free JavaScript books][40]\n- [Frontend rescue: how to keep up to date on frontend technologies][41]\n- [http://yanhaijing.com][42] 当然还有我的博客也非常不错哦\n- [http://yanhaijing.com/es5][43] 如果你想成为高手，我建议阅读`ecmascript`规范\n- [给javascript初学者的24条最佳实践][44]\n- [我希望我知道的七个JavaScript技巧][45]\n\n参考自原文：http://www.2ality.com/2013/06/basic-javascript.html\n参考自译文：http://yanhaijing.com/basejs/\n\n  [1]: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\n  [2]: http://yanhaijing.com/javascript/2013/06/22/javascript-designing-a-language-in-10-days/\n  [3]: http://jquery.com/\n  [4]: http://extjs.org.cn/\n  [5]: http://underscorejs.org/\n  [6]: http://backbonejs.org/\n  [7]: https://statics.sh1a.qingstor.com/2020/11/29/js.png\n  [8]: https://github.com/\n  [9]: https://segmentfault.com/u/puyart\n  [10]: https://segmentfault.com/a/1190000003767058\n  [11]: https://nodejs.org/\n  [12]: http://nwjs.io/\n  [13]: http://electron.atom.io/\n  [14]: http://unity3d.com/cn/\n  [15]: http://www.cocos.com/doc/article/index?type=cocos2d-x&url=/doc/cocos-docs-master/manual/framework/cocos2d-js/catalog/../1-about-cocos2d-js/1-1-a-brief-history/zh.md\n  [16]: http://pomelo.netease.com/\n  [17]: https://www.phodal.com/blog/why-javascript-will-use-vr-world/\n  [18]: http://blog.jobbole.com/46055/\n  [19]: http://node-os.com/\n  [20]: http://www.2ality.com/2011/05/semicolon-insertion.html\n  [21]: http://yanhaijing.com/javascript/2014/01/05/exploring-the-abyss-of-null-and-undefined-in-javascript/\n  [22]: http://yanhaijing.com/javascript/2014/04/25/strict-equality-exemptions/\n  [23]: http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points\n  [24]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\n  [25]: http://yanhaijing.com/javascript/2013/12/28/demystifying-this-in-javascript\n  [26]: http://yanhaijing.com/javascript/2014/04/30/javascript-this-keyword\n  [27]: http://yanhaijing.com/javascript/2013/08/30/understanding-scope-and-context-in-javascript\n  [28]: http://yanhaijing.com/javascript/2014/04/30/JavaScript-Scoping-and-Hoisting\n  [29]: http://yanhaijing.com/javascript/2014/04/29/what-is-the-execution-context-in-javascript\n  [30]: http://yanhaijing.com/javascript/2013/08/23/javascript-inheritance-how-to-shoot-yourself-in-the-foot-with-prototypes\n  [31]: http://yanhaijing.com/javascript/2013/08/30/encapsulation-of-javascript\n  [32]: http://yanhaijing.com/javascript/2014/01/17/fun-with-javascript-native-array-functions\n  [33]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n  [34]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n  [35]: http://www.2ality.com/2011/08/json-api.html\n  [36]: https://developer.mozilla.org/en-US/docs/Web/API/console\n  [37]: https://nodejs.org/\n  [38]: http://www.2ality.com/2013/07/meta-style-guide.html\n  [39]: http://underscorejs.org/\n  [40]: http://jsbooks.revolunet.com/\n  [41]: http://uptodate.frontendrescue.org/\n  [42]: http://yanhaijing.com/\n  [43]: http://yanhaijing.com/es5\n  [44]: http://yanhaijing.com/javascript/2013/12/11/24-JavaScript-best-practices-for-beginners\n  [45]: http://yanhaijing.com/javascript/2014/04/23/seven-javascript-quirks-i-wish-id-known-about\n","source":"_posts/前端/javascript基础学习.md","raw":"---\ntitle: JavaScript基础教程\ndate: 2018-09-14 00:12:00\nauthor: blinkfox\nimg: https://statics.sh1a.qingstor.com/2018/09/14/js.jpg\ncategories: 前端\ntags:\n  - JavaScript\n---\n\n## 一、JavaScript介绍\n\n[JavaScript][1]是目前所有主流浏览器上唯一支持的脚本语言，这也是早期`JavaScript`的唯一用途。其主要作用是在不与服务器交互的情况下修改`HTML`页面内容，因此其最关键的部分是`DOM`（文档对象模型），也就是`HTML`元素的结构。通过`Ajax`可以使`HTML`页面通过`JavaScript`，在不重新加载页面的情况下从服务器上获取数据并显示，大幅提高用户体验。通过`JavaScript`，使`Web`页面发展成胖客户端成为可能。\n\n### 语言的性质\n\n本节对`JavaScript`的性质做简要介绍，以帮你理解一些疑问。\n\n`JavaScript`和`ECMAScript`（JavaScript versus ECMAScript）\n编程语言称为`JavaScript`，语言标准被称为`ECMAScript`。他们有不同名字的原因是因为“Java”已经被注册为商标（属于Oracle）。目前，只有`Mozilla`被正式允许使用“JavaScript”名称，因为很久以前他们得到一份许可。因此，开放的语言标准拥有不同的名字。当前的`JavaScript`版本是`ECMAScript 6`，`ECMAScript 7`当前是开发版。\n\n`JavaScript`之父，`Brendan Eich`[迅速了创建一门编程语言][2]。（否则，Netscape将使用其他技术）。他借鉴了几门其他语言的一些特性：\n\n- JavaScript借鉴了Java的语法和如何区分原始值和对象。\n- JavaScript的函数设计受Scheme和AWK的启发——他们（的函数）都是第一类（first-class）对象，并且在语言中广泛使用。闭包使他们（函数）变成强大的工具。\n- Self影响了JavaScript独一无二的面向对象编程(OOP)风格。它的核心思想（在这里我们没有提到）非常优雅，基于此创建的语言非常少。但后面会提到一个简单的模式照顾大部分用例。JavaScript面向对象编程的杀手级特性是你可以直接创建对象。不需要先创建类或其他类似的东西。\n- Perl和Python影响了JavaScript字符串，数组和正则表达式的操作。\n\n`JavaScript`在最初的时候并不是一个完善的语言，因此也导致`JavaScript`遗留了很多令人诟病的问题。在开发稍大规模的应用时会显得力不从心，但是由于`JavaScript`本身是一种非常灵活的语言，因此在它的基础上开发程序库比较容易，因此出现了一大批非常优秀的第三方库，如[jQuery][3]，[ExtJS][4]，[underscorejs][5]，[backbone][6]等等，由于这些第三方库，`JavaScript`变得非常简单。其中`jQuery`的使用非常广泛，它大幅简化了`DOM`和`Ajax`，已经成为了很多网站的标配。`jQuery`虽然基于`JavaScript`，但它提供了另外一种编程范式，也就是逻辑式编程，与`SQL`和正则表达式类似。\n\n### JavaScript能做什么\n\n![JavaScript项目在Github所占比例][7]\n\n如上图，`JavaScript`作为[Github][8]上最流行、最火的编程语言，几乎无所不能。这里是[PuYart][9]的关于[`JavaScript`就要统治世界了][10]的文章，可以让我们了解`JavaScript`到底能做什么的一些介绍。\n\n1. Web前端(各种前端工具类库、前端框架、动画效果、数据可视化等)\n2. 服务端开发([Node.js][11])\n3. 移动应用或者`Hybrid App`(Cordova)\n4. 桌面应用([NW.js][12]、[Electron][13])\n5. 游戏([Unity3D][14]、[Cocos2d-js][15]、[Pomelo][16])\n6. VR([JavaScript在VR世界的应用][17])\n7. 硬件、嵌入式物联网等([Tessel：用JavaScript做嵌入式开发][18])\n8. 操作系统([NodeOS][19])\n\n> Atwood's Law: any application that can be written in JavaScript, will eventually be written in JavaScript.(Atwood定律：凡是能用JavaScript写出来的，最终都会用JavaScript写出来。)\n\n## 二、 JavaScript语法\n\n### 语句和表达式\n\n了解`JavaScript`的语法，先来了解两个主要的语法类型：语句和表达式。\n\n- 语句通常是“做某些事情”。程序是一组语句的序列。举个例子，下面声明（创建）一个变量 `foo`：\n\n```javascript\nvar foo;\n```\n\n- 表达式是产生“值”。他们通常位于赋值操作的右边、函数参数等。举个例子：\n\n```javascript\n3 * 7\n```\n\n语句和表达式之间的区别最好通过实例说明，`JavaScript`（像Java）有两种不同的方式实现`if-then-else`。一种是用语句：\n\n```javascript\nvar x;\nif (y >= 0) {\n    x = y;\n} else {\n    x = -y;\n}\n```\n\n另一种是表达式：\n\n```javascript\nvar x = y >= 0 ? y : -y;\n```\n\n你可以将后者作为函数参数（但前者不行）：\n\n```javascript\nmyFunction(y >= 0 ? y : -y)\n```\n\n最后，每当`JavaScript`期待一个语句，你也可以用一个表达式代替。例如：\n\n```javascript\nfoo(bar(7, 1));\n```\n\n`foo(...);`是一个语句（也叫做表达式语句），`bar(7, 1)`则是一个表达式。他们都实现函数调用。\n\n### 流程控制语句和语句块\n\n流程控制语句，其语句体可以是单条语句。举两个例子：\n\n```javascript\nif (obj !== null) obj.foo();\n\nwhile (x > 0) x--;\n```\n\n然而，任何语句总能被语句块代替，花括号包含零或多条语句。因此，你也可以这样写：\n\n```javascript\nif (obj !== null) {\n    obj.foo();\n}\n\nwhile (x > 0) {\n    x--;\n}\n```\n\n为便于程序的阅读和维护，推荐使用后一种方式，即语句块方式。\n\n### 分号\n\n`JavaScript`中的分号是[可选的][20]。但省略（分号）可能会带来意想不到的结果，所以我建议还是写上分号。\n\n正如上面所看到的，分号作为语句的结尾，但语句块不需要。仅有一种情况下你能看到语句块后面有分号——**函数表达式后面的函数体块**。**表达式作为语句的结尾，后面是分号**：\n\n```javascript\nvar x = 3 * 7;\nvar f = function () { };\n```\n\n### 注释\n\n`JavaScript`的注释有两种形式：单行注释和多行注释。单行注释以`//`开头，以换行符结尾：\n\n```javascript\nx++; // 单行（single-line）注释\n```\n\n多行注释用`/**/`包裹\n\n```javascript\n/*\n 这是多行注释\n 多行哦\n */\n```\n\n## 三、变量和赋值\n\n`JavaScript`中的变量在使用前必须先声明，否则会报错引用错误（Reference Error）：\n\n```javascript\nvar foo;  // 声明变量“foo”\n```\n\n### 赋值\n\n你可以在声明变量的同时为其赋值：\n\n```javascript\nvar foo = 6;\n```\n\n你也可以给已经存在的变量重新赋值：\n\n```javascript\nfoo = 4;  // 更改变量的值\n```\n\n### 复合赋值操作符\n\n有很多复合赋值操作符，例如+=。下面的两个赋值操作等价：\n\n```javascript\nx += 1;\nx = x + 1;\n```\n\n### 标识符和变量名\n\n标识符就是事物的名字，在`JavaScript`中他们扮演不同的语法角色。例如，变量的名称是一个标识符。\n\n大体上，标识符的第一个字符可以是任何`Unicode`字符、美元标志符（$）或下划线（_）。后面可以是任意字符和数字。因此，下面全是合法的标识符：\n\n```javascript\narg0\n_tmp\n$elem\nπ\n```\n\n> **注意**：首字符不能是数字，如果是数字的话，该如何区分是数字还是变量呢？\n\n一些标识符是“保留关键字”——他们是语法的一部分，不能用作变量名。从技术上讲，下面三个标识符不是保留字，但也不应该作为变量名：\n\n```javascript\nInfinity NaN undefined\n```\n\n## 四、值\n\n`JavaScript`有所有我们期待的编程语言值类型：布尔，数字，字符串，数组等。`JavaScript`中的所有值都有属性。每个属性有一个键（或名字）和一个值。你可以使用点（.）操作符读取属性：\n\n```javascript\nvalue.propKey\n```\n\n举个例子：字符串`abc`有属性`lenght`（长度）\n\n```javascript\nvar str = 'abc';\nconsole.log(str.length); // 得到3\n```\n\n上面的代码也可以写成下面这样：\n\n```javascript\n'abc'.length // 得到3\n```\n\n点操作符也可以用来给属性赋值：\n\n```javascript\nvar obj = {};  // 空对象\nobj.foo = 123; // 创建属性“foo”，设置它为123\nconsole.log(obj.foo); // 得到123\n```\n\n你也可以通过它（.）调用方法：\n\n```javascript\n'hello'.toUpperCase(); // 得到HELLO\n```\n\n上面，我们在值`hello`上面调用方法`toUpperCase()`。\n\n### 原始类型值和对象\n\nJavaScript定义了不同值之间的区别：\n\n- 原始值包括：`boolean`，`number`，`string`，`null`和`undefined`。\n- 所有其他的值都是对象。实际上对象被定义为——所有不为原始值的值。\n\n两者之间的主要区别在于他们是如何被比较的：每一个对象有一个独一无二的标志，并且仅和自己相等：\n\n```javascript\nvar obj1 = {};  // 一个空对象\nvar obj2 = {};  // 另一个空对象\nobj1 === obj2   // false\nobj1 === obj1   // true\n```\n\n相反，所有原始值只要编码值相同就被认为是相同的：\n\n```javascript\nvar prim1 = 123;\nvar prim2 = 123;\nprim1 === prim2 // true\n```\n\n### 原始类型值\n\n下面全是原始类型值（简称：原始值）：\n\n- 布尔类型：true，false\n- 数字类型：1736，1.351\n- 字符串类型: ‘abc’，”abc”\n- 两个“无值（non-values）”：undefined，null\n原始值的特征：\n\n- **值做比较时,“内容”做比较**。\n\n```javascript\n3 === 3 // true\n'abc' === 'abc' // true\n```\n\n- **无法更改**：值的属性无法更改，无法添加和移除属性，获取未知属性总返回undefined。\n\n```javascript\nvar str = 'abc';\nstr.foo = 3; // try to create property `foo` ⇒ no effect\nstr.foo  // unknown property ⇒  undefined\n```\n\n### 对象\n\n#### 对象的类型\n\n所有非原始值的值都是对象。最常见的几种对象类型是：\n\n- 简单对象（类型是`Object`）能通过对象字面量创建：\n\n```javascript\n{\n    firstName: ‘Jane’,\n    lastName: ‘Doe’\n}\n```\n\n上面的对象有两个属性：`firstName`属性的值是“Jane”，`lastName`属性的值是“Doe”。\n\n- 数组（类型是`Array`）能通过数组字面量创建：\n\n```javascript\n[ ‘apple’, ‘banana’, ‘cherry’ ]\n```\n\n上面的数组有三个元素，可以通过数字索引访问。例如“apple”的索引是0。\n\n- 正则表达式对象（类型是`RegExp`）能通过正则表达式字面量创建。\n\n```javascript\n/^a+b+$/\n```\n\n#### 对象的特征\n\n- **比较的是引用**：比较的是标识符，每个值有自己的标识符。\n\n```javascript\n{} === {}  // 两个不同的空对象, false\nvar obj1 = {};\nvar obj2 = obj1;\nobj1 === obj2   // true\n```\n\n- **默认可以更改**。\n\n```javascript\nvar obj = {};\nobj.foo = 123;\nobj.foo //123\n```\n\n所有的数据结构（如数组）都是对象，但并不是所有的对象都是数据结构。例如：正则表达式是对象，但不是数据结构。\n\n### undefined 和 null\n\n`JavaScript`有两个“无值）”：`undefined`和`null`。\n\n`undefined`的意思是“没有值”。未初始化的变量是`undefined`：\n\n```javascript\nvar foo;\nfoo // undefined\n```\n\n读取不存在的属性时，将返回`undefined`：\n\n```javascript\n  > var obj = {}; // 空对象\n  > obj.foo // undefined\n```\n\n缺省的参数也是`undefined`：\n\n```javascript\nfunction f(x) {\n    return x;\n}\nf(); //undefined\n```\n\n`null`的意思是“没有对象”。它被用来表示对象的无值（参数，链上的对象等）。\n\n通常情况下你应该把`undefined`和`null`看成是等价的，如果他们代表相同意义的无值的话。检查他们的一种方式是通过严格比较：\n\n```javascript\nif (x === undefined || x === null) {\n    ...\n}\n```\n\n另一种在实际中使用的方法是认为undefined 和 null 都是false：\n\n```javascript\nif (!x) {\n    ...\n}\n```\n\n> **警告**：false，0，NaN 和 “” 都被当作false。\n\n### 包装类型\n\n对象类型的实例`Foo`（包括内建类型，例如Array和其他自定义类型）从对象`Foo.prototype`上获取方法。你可以通过读取这个方法的方式（不是调用）验证这点：\n\n```javascript\n[].push === Array.prototype.push  // true\n```\n\n相反，**原始类型是没有类型的，所以每个原始类型有一个关联类型，称之为包装类型**：\n\n- 布尔值的包装类型是 Boolean。布尔值从Boolean.prototype上获取方法：\n\n```javascript\n  > true.toString === Boolean.prototype.toString    //true\n```\n\n> 注意：包装类型名字的首字母是大写的B。如果在JavaScript中布尔值的类型可以访问，那么它可能会被转换为布尔对象。\n\n- 数字值的包装类型是`Number`。\n- 字符串值的包装类型是`String`。\n\n包装类型也有实例（他们的实例是对象），但不常用。相反，包装类型有其他用处：**如果你将他们作为函数调用，他们可以将值转换为原始类型**。\n\n```javascript\nNumber('123') //123\nString(true)  //'true'\n```\n\n### 通过typeof和instanceof将值分类\n\n有两个操作符可以用来将值分类：`typeof`主要用于原始值，`instanceof`主要用于对象。\n\n#### typeof 使用方法如下：\n\n`typeof «value»`\n\n`typeof`返回描述`value`“类型”的一个字符串。例如：\n\n```javascript\ntypeof true //'boolean'\ntypeof 'abc' //'string'\ntypeof {} // 空对象字面量,'object'\ntypeof [] // 空数组字面量,'object'\n```\n\n下面列出了`typeof`操作的所有结果：\n\n```\n操作数 结果\nundefined\t'undefined'\nnull\t'object'\nBoolean value\t'boolean'\nNumber value\t'number'\nString value\t'string'\nFunction\t'function'\nAll other values\t'object'\n```\n\n有两个结果和我们上面说的的原始值与对象是矛盾的：\n\n- 函数的类型是`function`而不是`object`。因为函数（类型为“function”）是对象（类型是对象）的子类型，这不是一个错误。\n- `null`的类型是`object`。这是一个bug，但从没被修复，因为修复后会破坏现有的代码。\n\n#### instanceof使用方法如下：\n\n`«value» instanceof «Constr»`\n\n如果`value`是一个对象，并且`value` 是由构造函数`Constr`创建的（参考：类）。例如：\n\n```javascript\nvar b = new Bar();  // 通过构造函数Bar创建对象\nb instanceof Bar    //true\n{} instanceof Object    //true\n[] instanceof Array //true\n```\n\n### 深入阅读\n\n- [探索JavaScript中Null和Undefined的深渊][21]\n\n## 五、布尔\n\n布尔类型原始值包括`true`和`false`。下面的操作符会得到布尔值：\n\n- 二元逻辑运算符：&&（与），||（或）\n- 前缀逻辑运算符：!（非）\n- 等值运算符：=== !== == !=\n- 比较运算符（字符串或数字）：> >= < <=\n\n### 真值和假值\n\n每当`JavaScript`希望一个布尔值时（例如：if语句的条件），可以使用任何值。它将被理解（转换）为`true`或`false`。下面的值被理解为`false`：\n\n- undefined, null\n- 布尔: false\n- 数字: 0, NaN\n- 字符串: ‘’\n\n所有其他值被认为`true`。被理解为`false`的值称为假值，被理解为`true`的值称为真值。可以使用`Boolean`作为函数，测试值被理解为什么。\n\n```javascript\nBoolean(undefined)  //false\nBoolean(0)    //false\nBoolean(3)    //true\n```\n\n### 二元逻辑运算符\n\n`JavaScript`中的**二元逻辑运算符是短路运算**——如果第一个操作数可以确定结果，第二个操作数将不被验证（运算）。例如，在下面的代码中，函数`foo()`永远不会被调用。\n\n```javascript\nfalse && foo()\ntrue || foo()\n```\n\n此外，**二元逻辑运算符会返回操作数中的一个**，可能是一个布尔值，也可能不是。\n\n- **与**：如果第一个操作数是假值，返回第一个。否则返回第二个操作数。\n\n```javascript\nNaN && 'abc'    //NaN\n123 && 'abc'    //'abc'\n```\n\n- **或**：如果第一个操作数是真值，返回第一个。否则，返回第二个操作数。\n\n```javascript\n'abc' || 123    //'abc'\n'' || 123   //123\n```\n\n### 等值运算符\n\n在`JavaScript`中检测相等，你可以使用严格相等（`===`）和严格不等（`!==`）。或者你也可以使用非严格相等（`==`）和非严格不等（`!=`）。\n\n> **经验规则：总是用严格运算符，假装非严格运算符不存在。严格相等更安全。**\n\n### 深入阅读\n\n- [在JavaScript中什么时候使用==是正确的？][22]\n\n## 六、数字\n\n`JavaScript`中的**所有数字都是浮点型**（虽然大部分的JavaScript引擎内部也使用整数）。至于为什么这样设计，查看这里（[每一个JavaScript开发者应该了解的浮点知识][23]）。\n\n```javascript\n1 === 1.0   //true\n```\n\n特殊数字：\n\n- `NaN` (“不是一个数字 not a number”): 错误值。\n\n```javascript\nNumber('xyz')  // 'xyz' 不能被转换为数字得到:NaN\n```\n\n- `Infinity`：也是最大错误值（无穷大）\n\n```javascript\n3 / 0   //Infinity\nMath.pow(2, 1024)  // 数字太大了,得到Infinity\n```\n\n`Infinity`有时很有用，因为它比任何其他数字都大。同样，`-Infinity` 比其他任何数字都小。\n\n- `JavaScript`有两个零，`+0`和`-0`。它（js引擎）通常不让你看到，并简单将两个零都显示为0：\n\n```javascript\n+0  //0\n-0  //0\n```\n\n因此最好假装只有一个零（正如我们看到假值时所做的那样：**-0 和 +0 都是假值**）。\n\n### 运算符\n\n`JavaScript`中有下列算数运算符：\n\n```javascript\n加: number1 + number2\n减: number1 - number2\n乘: number1 * number2\n除: number1 / number2\n模: number1 % number2\n自增: ++variable, variable++\n自减: –variable, variable–\n负值: -value\n正值（转换为数字）: +value\n```\n\n全局对象`Math`通过函数提供更多算数运算操作。\n\n`JavaScript`中也有位运算符（例如：&）。\n\n## 七、字符串\n\n字符串可以直接通过字符串字面量创建。这些字面量被单引号或双引号包裹。反斜线（\\）转义字符并且产生一些控制字符。例如：\n\n```javascript\n'abc'\n\"abc\"\n\n'Did she say \"Hello\"?'\n\"Did she say \\\"Hello\\\"?\"\n\n'That\\'s nice!'\n\"That's nice!\"\n\n'Line 1\\nLine 2'  // 换行\n'Backlash: \\\\'\n```\n\n可以通过方括号访问单个字符：\n\n```javascript\nvar str = 'abc';\nstr[1]    //'b'\n```\n`length`属性是字符串的字符数量。\n\n```javascript\n'abc'.length  //3\n```\n\n> **提醒**：字符串是不可变的，如果你想改变现有字符串，你需要创建一个新的字符串。\n\n### 字符串运算符\n\n字符串可以通过加号操作符（+）拼接，如果其中一个操作数为字符串，会将另一个操作数也转换为字符串。\n\n```javascript\nvar msgCount = 3;\n'You have '+ msgCount + ' messages' //'You have 3 messages'\n```\n\n连续执行拼接操作可以使用`+=`操作符：\n\n```javascript\nvar str = '';\nstr += 'Multiple ';\nstr += 'pieces ';\nstr += 'are concatenated.';\nconsole.log(str); //'Multiple pieces are concatenated.'\n```\n\n### 字符串方法\n\n字符串有许多有用的方法。例如：\n\n```javascript\n'abc'.slice(1)  // 复制子字符串,得到索引1及其之后的字符串，即：'bc'\n'abc'.slice(1, 2)   //得到索引1和2之间的字符串，即：'b'\n\n'\\t xyz  '.trim()  // 移除空白字符，即：'xyz'\n\n'mjölnir'.toUpperCase()   //转成大写，即：'MJÖLNIR'\n\n'abc'.indexOf('b')  // 查找第一个b的索引，即：1\n'abc'.indexOf('x')    //没有返回-1\n```\n\n## 八、语句\n\n### 条件（Conditionals）\n`if`语句通过布尔条件决定执行那个分支：\n\n```javascript\nif (myvar === 0) {\n    // then\n}\n\nif (myvar === 0) {\n    // then\n} else {\n    // else\n}\n\nif (myvar === 0) {\n    // then\n} else if (myvar === 1) {\n    // else-if\n} else if (myvar === 2) {\n    // else-if\n} else {\n    // else\n}\n```\n\n下面的`switch`语句，furit的值决定那个分支被执行。\n\n```javascript\nswitch (fruit) {\n    case 'banana':\n        // ...\n        break;\n    case 'apple':\n        // ...\n        break;\n    default:  // 所有其他情况\n        // ...\n}\n```\n\n### 循环（Loops）\n\nfor 循环的格式如下：\n\n```javascript\nfor(初始化; 当条件成立时循环; 下一步操作)\n```\n\n例子：\n\n```javascript\nfor (var i=0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n```\n\n当条件成立时`while`循环继续循环它的循环体。\n\n```javascript\n// 和上面的for循环相等\nvar i = 0;\nwhile (i < arr.length) {\n    console.log(arr[i]);\n    i++;\n}\n```\n\n当条件成立时，`do-while`循环继续循环。由于条件位于循环体之后，所以循环体总是被至少至少执行一次。\n\n```javascript\ndo {\n    // ...\n} while(条件);\n```\n\n在所有的循环中：\n\n- break中断循环\n- continue开始一个新的循环迭代\n\n## 九、函数\n\n定义函数的一种方法是通过函数声明：\n\n```javascript\nfunction add(param1, param2) {\n    return param1 + param2;\n}\n```\n\n上面的代码定义一个名称叫做`add`的函数，有两个参数`param1`和`param2`，并且返回参数的和。下面是如何调用这个函数：\n\n```javascript\nadd(6, 1)   //7\nadd('a', 'b')   //'ab'\n```\n\n另一种定义`add()`函数的方法是通过函数表达式：\n\n```javascript\nvar add = function (param1, param2) {\n    return param1 + param2;\n};\n```\n\n函数表达式产生一个值，因此可以直接将函数作为参数传递给其他函数：\n\n```javascript\nsomeOtherFunction(function (p1, p2) { ... });\n```\n\n### 函数声明提升\n\n函数声明会被提升，他们全被移动到当前作用域开始之处。这允许你在函数声明之前调用它们：\n\n```javascript\nfunction foo() {\n    bar();  // 没问题，bar被提升\n    function bar() {\n        ...\n    }\n}\n```\n\n> **注意**：虽然变量声明也会被提升，但赋值的过程不会被提升：\n\n```javascript\nfunction foo() {\n    bar();  // 有问题，bar是undefined\n    var bar = function () {\n        // ...\n    };\n}\n```\n\n### 特殊变量参数\n\n**在`JavaScript`中你可以调用任意函数并传递任意数量的参数**——语言绝不会“抱怨”（参数检测）。都可以正常工作，然而，使所有参数可访问需要通过特殊变量`arguments`。`arguments`看起来像数组，但它没有数组的方法（称为类数组 array-like）。\n\n```javascript\nfunction f() { return arguments }\nvar args = f('a', 'b', 'c');\nargs.length //3\nargs[0]  // 获取索引为0的元素,'a'\n```\n\n### 太多或太少参数\n\n让我们通过下面的函数探索`JavaScript`中传递太多或太少参数时如何处理\n\n```javascript\nfunction f(x, y) {\n    console.log(x, y);\n}\n```\n\n多出的参数将被忽略（可以通过`arguments`访问）：\n\n```javascript\nf('a', 'b', 'c')    //a b\n```\n\n缺少的参数将会是`undefined`：\n\n```javascript\nf('a')    //a undefined\nf() //undefined undefined\n```\n\n### 可选参数\n\n下面是一个常见模式，给参数设置默认值：\n\n```javascript\nfunction pair(x, y) {\n    x = x || 0;  // (*)\n    y = y || 0;\n    return [ x, y ];\n}\n```\n\n在`（*）`这行，如果x是真值（除了：`null`，`undefined` 等），\t \t操作符返回x。否则，它返回第二个操作数。\n\n```javascript\npair()  //[ 0, 0 ]\npair(3) //[ 3, 0 ]\npair(3, 5)  //[ 3, 5 ]\n```\n\n### 强制数量\n\n如果你想强制参数的数量，你可以检测`arguments.length`：\n\n```javascript\nfunction pair(x, y) {\n    if (arguments.length !== 2) {\n        throw new Error('Need exactly 2 arguments');\n    }\n    ...\n}\n```\n\n### 将arguments 转换为数组\n\n`arguments`不是一个数组，它仅仅是类数组（array-like）：它有一个`length`属性，并且你可以通过方括号索引方式访问它的元素。然而，你不能移除元素，或在它上面调用任何数组方法。因此，有时你需要将其转换为数组。这就是下面函数的作用。\n\n```javascript\nfunction toArray(arrayLikeObject) {\n    return [].slice.call(arrayLikeObject);\n}\n```\n\n## 十、异常处理\n\n[异常处理][24]最常见的方式像下面这样：\n\n```javascript\nfunction throwException() {\n    throw new Error('Problem!');\n}\n\ntry {\n    throwException();\n} catch (e) {\n    console.log(e);  // 错误：信息\n    console.log(e.stack);  // 非标准，但大部分浏览器支持\n}\n```\n\ntry分支包裹易出错的代码，如果try分支内部抛出异常，catch分支将会执行。\n\n## 十一、严格模式\n\n严格模式开启检测和一些其他措施，使`JavaScript`变成更整洁的语言。推荐使用严格模式。为了开启严格模式，只需在`JavaScript`文件或`script`标签第一行添加如下语句：\n\n```javascript\n'use strict';\n```\n\n你也可以在每个函数上选择性开启严格模式，只需将上面的代码放在函数的开头：\n\n```javascript\nfunction functionInStrictMode() {\n    'use strict';\n}\n```\n\n下面的两小节看下严格模式的三大好处。\n\n### 明确错误\n\n让我们看一个例子，严格模式给我们明确的错误，否则`JavaScript`总是静默失败：下面的函数`f()` 执行一些非法操作，它试图更改所有字符串都有的只读属性——`length`：\n\n```javascript\nfunction f() {\n    'abc'.length = 5;\n}\n```\n\n当你调用上面的函数，它静默失败，赋值操作被简单忽略。让我们将`f()`在严格模式下运行：\n\n```javascript\nfunction f_strict() {\n    'use strict';\n    'abc'.length = 5;\n}\n```\n\n现在浏览器报给我们一些错误：\n\n```javascript\nf_strict()  // TypeError: Cannot assign to read only property 'length' of abc\n```\n\n### 不是方法的函数中的this\n\n在严格模式下，不作为方法的函数中的`this`值是`undefined`：\n\n```javascript\nfunction f_strict() {\n    'use strict';\n    return this;\n}\nconsole.log(f_strict() === undefined);  // true\n```\n\n在非严格模式下，`this`的值是被称作全局对象（`global object`）（在浏览器里是`window`）：\n\n```javascript\nfunction f() {\n    return this;\n}\nconsole.log(f() === window);  // true\n```\n\n### 不再自动创建全局变量\n\n在非严格模式下，如果你给不存在的变量赋值，`JavaScript`会自动创建一个全局变量：\n\n```javascript\nfunction f() { foo = 5 }\nf()  // 不会报错\nfoo // 5\n```\n在严格模式下，这会产生一个错误：\n\n```javascript\nfunction f_strict() { 'use strict'; foo2 = 4; }\nf_strict()  // ReferenceError: foo2 is not defined\n```\n\n### 深入阅读\n\n- [揭秘javascript中谜一样的this][25]\n- [JavaScript中的this关键字][26]\n\n## 十二、变量作用域和闭包\n\n在`JavaScript`中，你必须使用变量之前，通过`var`声明变量：\n\n```javascript\nvar x;\nx = 3;\ny = 4;  // ReferenceError: y is not defined\n```\n\n你可以用一条`var`语句声明和初始化多个变量：\n\n```javascript\nvar x = 1, y = 2, z = 3;\n```\n\n但我建议每个变量使用一条语句。因此，我将上面的语句重写为：\n\n```javascript\nvar x = 1;\nvar y = 2;\nvar z = 3;\n```\n\n由于提升（见下文），最好在函数顶部声明变量。\n\n### 变量和函数作用域\n\n变量的作用域总是整个函数（没有块级作用域）。例如：\n\n```javascript\nfunction foo() {\n    var x = -3;\n    if (x < 0) {  // (*)\n        var tmp = -x;\n        ...\n    }\n    console.log(tmp);  // 3\n}\n```\n\n我们可以看到tmp变量不仅在（*）所在行的语句块存在，它在整个函数内都存在。\n\n### 变量提升\n\n变量声明会被提升：声明会被移到函数的顶部，但赋值过程不会。举个例子，在下面的函数中`（*）`行位置声明了一个变量。\n\n```javascript\nfunction foo() {\n    console.log(tmp); // undefined\n    if (false) {\n        var tmp = 3;  // (*)\n    }\n}\n```\n\n在内部，上面的函数被执行像下面这样：\n\n```javascript\nfunction foo() {\n    var tmp;  // declaration is hoisted\n    console.log(tmp);\n    if (false) {\n        tmp = 3;  // assignment stays put\n    }\n}\n```\n\n### 闭包\n\n每个函数保持和函数体内部变量的连接，甚至离开创建它的作用域之后。例如：\n\n```javascript\nfunction createIncrementor(start) {\n    return function () {  // (*)\n        return start++;\n    }\n}\n```\n\n在`（*）`行开始的函数在它创建时保留上下文，并在内部保存一个`start`活动值：\n\n```javascript\nvar inc = createIncrementor(5);\ninc()   // 5\ninc() // 6\ninc()   // 7\n```\n\n闭包是一个函数加上和其作用域链的链接。因此，`createIncrementor()`返回的是一个闭包。\n\n### IIFE：模拟块级作用域\n\n有时你想模拟一个块，例如你想将变量从全局作用域隔离。完成这个工作的模式叫做 `IIFE`(立即执行函数表达式(`Immediately Invoked Function Expression`))：\n\n```javascript\n(function () {  // 块开始\n    var tmp = ...;  // 非全局变量\n}());  // 块结束\n```\n\n上面你会看到函数表达式被立即执行。外面的括号用来阻止它被解析成函数声明；只有函数表达式能被立即调用。函数体产生一个新的作用域并使`tmp`变为局部变量。\n\n### 闭包实现变量共享\n\n下面是个经典问题，如果你不知道，会让你费尽思量。因此，先浏览下，对问题有个大概的了解。\n\n闭包保持和外部变量的连接，有时可能和你想像的行为不一致：\n\n```javascript\nvar result = [];\nfor (var i=0; i < 5; i++) {\n    result.push(function () { return i });  // (*)\n}\nconsole.log(result[1]()); // 5 (不是 1)\nconsole.log(result[3]()); // 5 (不是 3)\n```\n\n`(*)`行的返回值总是当前的i值，而不是当函数被创建时的i值。当循环结束后，i的值是5，这是为什么数组中的所有函数的返回值总是一样的。如果你想捕获当前变量的快照，你可以使用`IIFE`：\n\n```javascript\nfor (var i=0; i < 5; i++) {\n    (function (i2) {\n        result.push(function () { return i2 });\n    }(i));  // 复制当前的i\n}\n```\n\n深入阅读\n\n- [认识javascript中的作用域和上下文][27]\n- [JavaScript的作用域和提升机制][28]\n- [了解JavaScript的执行上下文][29]\n\n## 十三、对象和继承\n\n和所有的值类型一样，对象有属性。事实上，你可以将对象当作一组属性的集合，每个属性都是一对（键和值）。键是字符串，值可以是任意`JavaScript`值。到目前为止，我们仅仅见过键是标识符的属性，因为点操作符处理的键必须为标识符。在这节，你讲见到另一种访问属性的方法，能将任意字符串作为键。\n\n### 单个对象\n在`JavaScript`中，你可以直接创建对象，通过对象字面量：\n\n```javascript\nvar jane = {\n    name: 'Jane',\n\n    describe: function () {\n        'use strict';\n        return 'Person named '+this.name;\n    }\n};\n```\n\n上面的对象有两个属性：`name`和`describe`。你能读（“get”）和 写（“set”）属性：\n\n```javascript\njane.name  // get，'Jane'\njane.name = 'John';  // set\njane.newProperty = 'abc';  // 自动创建\n```\n\n属性是函数如`describe`可以被当作方法调用。当调用他们时可以在它们内部通过this引用对象。\n\n```javascript\njane.describe()  // 调用方法,'Person named John'\njane.name = 'Jane';\njane.describe() // 'Person named Jane'\n```\n\n`in`操作符用来检测一个属性是否存在：\n\n```javascript\n'newProperty' in jane   // true\n'foo' in jane   // false\n```\n\n若读取一个不存在的属性，将会得到`undefined`值。因此上面的两个检查也可以像下面这样：\n\n```javascript\njane.newProperty !== undefined  // true\njane.foo !== undefined  // false\n```\n\n`delete`操作符用来删除一个属性：\n\n```javascript\ndelete jane.newProperty //true\n'newProperty' in jane   //false\n```\n\n### 任意键属性\n\n属性的键可以是任意字符串。到目前为止，我们看到的对象字面量中的和点操作符后的属性关键字。按这种方法你只能使用标识符。如果你想用其他任意字符串作为键名，你必须在对象字面量里加上引号，并使用方括号获取和设置属性。\n\n```javascript\nvar obj = { 'not an identifier': 123 };\nobj['not an identifier']    //123\nobj['not an identifier'] = 456;\n```\n\n方括号允许你动态计算属性关键字：\n\n```javascript\nvar x = 'name';\njane[x]; // 'Jane'\njane['na'+'me']; // 'Jane'\n```\n\n### 引用方法\n\n如果你引用一个方法，它将失去和对象的连接。就其本身而言，函数不是方法，其中的`this`值为`undefined`（严格模式下）。\n\n```javascript\nvar func = jane.describe;\nfunc()  // TypeError: Cannot read property 'name' of undefined\n```\n\n解决办法是使用函数内置的`bind()`方法。它创建一个新函数，其`this`值固定为给定的值。\n\n```javascript\nvar func2 = jane.describe.bind(jane);\nfunc2() // 'Person named Jane'\n```\n\n### 方法内部的函数\n\n每个函数都有一个特殊变量`this`。如果你在方法内部嵌入函数是很不方便的，因为你不能从函数中访问方法的`this`。下面是一个例子，我们调用`forEach`循环一个数组：\n\n```javascript\nvar jane = {\n    name: 'Jane',\n    friends: [ 'Tarzan', 'Cheeta' ],\n    logHiToFriends: function () {\n        'use strict';\n        this.friends.forEach(function (friend) {\n            // 这里的“this”是undefined\n            console.log(this.name + ' says hi to ' + friend);\n        });\n    }\n}\n```\n\n调用`logHiToFriends`会产生错误：\n\n```javascript\njane.logHiToFriends()   // TypeError: Cannot read property 'name' of undefined\n```\n\n有两种方法修复这问题。\n\n- 将`this`存储在不同的变量。\n\n```javascript\nlogHiToFriends: function () {\n    'use strict';\n    var that = this;\n    this.friends.forEach(function (friend) {\n        console.log(that.name + ' says hi to ' + friend);\n    });\n}\n```\n\n- forEach的第二个参数允许提供`this`值。\n\n```javascript\nlogHiToFriends: function () {\n    'use strict';\n    this.friends.forEach(function (friend) {\n        console.log(this.name + ' says hi to ' + friend);\n    }, this);\n}\n```\n\n在`JavaScript`中函数表达式经常被用作函数参数。时刻小心函数表达式中的`this`。\n\n### 构造函数：对象工厂\n\n除了作为“真正”的函数和方法，函数还在JavaScript中扮演第三种角色：**如果通过new操作符调用，他们会变为构造函数，对象的工厂**。构造函数是对其他语言中的类的粗略模拟。约定俗成，构造函数的第一个字母大写。例如：\n\n```javascript\n// 设置实例数据\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n// 方法\nPoint.prototype.dist = function () {\n    return Math.sqrt(this.x*this.x + this.y*this.y);\n};\n```\n\n我们看到构造函数分为两部分：首先，`Point`函数设置实例数据。其次，`Point.prototype`属性包含对象的方法。前者的数据是每个实例私有的，后面的数据是所有实例共享的。\n\n我们通过new操作符调用`Point`：\n\n```javascript\nvar p = new Point(3, 5);\np.x //3\np.dist();    //5.830951894845301\n```\n\np是`Point`的一个实例：\n\n```javascript\np instanceof Point  //true\ntypeof p    //'object'\n```\n\n### 深入阅读\n\n- [Javascript继承 原型的陷阱][30]\n- [Javascript 封装问题][31]\n\n## 十四、数组\n\n数组是数组元素的序列，能通过整数索引方法数组元素，数组索引从0开始。\n\n### 数组字面量\n数组字面量创建数组很方便：\n\n```javascript\n> var arr = [ 'a', 'b', 'c' ];\n```\n\n上面的数组有三个元素：分别是字符串“a”，“b”， “c”。你可以通过整数索引访问它们：\n\n```javascript\narr[0]  //'a'\narr[0] = 'x';\narr\n// [ 'x', 'b', 'c' ]\n```\n\n`length`属性总表示一个数组有多少项元素。\n\n```javascript\narr.length    //3\n```\n\n除此之外它也可以用来从数组上移除尾部元素：\n\n```javascript\narr.length = 2;\narr // [ 'x', 'b' ]\n```\n\n`in`操作符也可以在数组上工作。\n\n```javascript\n1 in arr // arr在索引为1处是否有元素？,true\n5 in arr // arr在索引为5处是否有元素？false\n```\n\n值得注意的是数组是对象，因此可以有对象属性：\n\n```javascript\narr.foo = 123;\narr.foo   // 123\n```\n\n### 数组方法\n\n数组有许多方法。举些例子：\n\n```javascript\nvar arr = [ 'a', 'b', 'c' ];\n\narr.slice(1, 2)  // 复制元素，[ 'b' ]\narr.slice(1)    // [ 'b', 'c' ]\n\narr.push('x')  // 在末尾添加一个元素，4\narr // [ 'a', 'b', 'c', 'x' ]\n\narr.pop()  // 移除最后一个元素，'x'\narr   // [ 'a', 'b', 'c' ]\n\narr.shift()  // 移除第一个元素，'a'\narr // [ 'b', 'c' ]\n\narr.unshift('x')  // 在前面添加一个元素，3\narr // [ 'x', 'b', 'c' ]\n\narr.indexOf('b')  // 查找给定项在数组中的索引，若不存在返回-1，\n// 1\narr.indexOf('y')  // -1\n\narr.join('-')  // 将元素拼接为一个字符串，'x-b-c'\narr.join('')    // 'xbc'\narr.join()  // 'x,b,c'\n```\n\n### 遍历数组\n\n有几种方法可以遍历数组元素。其中两个最重要的是`forEach`和`map`。\n\n`forEach`遍历整个数组，并将当前元素和它的索引传递给一个函数：\n\n```javascript\n[ 'a', 'b', 'c' ].forEach(function (elem, index) {  // (*)\n    console.log(index + '. ' + elem);\n});\n```\n\n上面代码的输出\n\n```javascript\n0. a\n1. b\n2. c\n```\n\n注意`（*）`行的函数参数是可省略的。例如：它可以只有一个参数`elem`。\n\n`map`创建一个新数组，通过给每个存在数组元素应用一个函数：\n\n```javascript\n[1,2,3].map(function (x) {\n    return x*x\n});\n// [ 1, 4, 9 ]\n```\n\n### 深入阅读\n\n- [有趣的javascript原生数组函数][32]\n\n## 十五、正则表达式\n\n`JavaScript`内建支持正则表达式。他们被双斜线分隔：\n\n```javascript\n/^abc$/\n/[A-Za-z0-9]+/\n```\n\n### 方法 test()：测试是否匹配\n\n```javascript\n/^a+b+$/.test('aaab')   // true\n/^a+b+$/.test('aaa')    // false\n```\n\n### 方法 exec()：匹配和捕获组\n\n```javascript\n/a(b+)a/.exec('_abbba_aba_')    // [ 'abbba', 'bbb' ]\n```\n\n返回的数组第一项（索引为0）是完整匹配，捕获的第一个分组在第二项（索引为1），等。有一种方法可以反复调用获取所有匹配。\n\n### 方法 replace()：搜索并替换\n\n```javascript\n'<a> <bbb>'.replace(/<(.*?)>/g, '[$1]') // '[a] [bbb]'\n```\n\n`replace`的第一个参数必须是正则表达式，并且开启全局搜索（`/g`标记），否则仅第一个匹配项会被替换。有一种方法使用一个函数来计算替换项。\n\n## 十六、数学\n\n[Math][33]是一个有算数功能的对象。例如：\n\n```javascript\nMath.abs(-2) // 2\nMath.pow(3, 2) // 3^2 = 9\nMath.max(2, -1, 5) //5\nMath.round(1.9) // 2\nMath.cos(Math.PI)  // 预定义常量π，-1\n```\n\n## 十七、标准库的其他功能\n\n`JavaScript`标准库相对简单，但有很多其他东西你可以使用：\n\n[Date][34]：日期构造函数，主要功能有转换和创建日期字符串，访问日期组成部分（年，小时等）。\n[JSON][35]：一个对象，功能是转换和生成`JSON`数据。\n[console.*][36]方法：浏览器的具体方法，不是语言成分的部分，但他们也可以在[Node.js][37]中工作。\n\n## 十八、下一步学什么？\n\n在你学会了这篇文章的基础教程后，你可以转到大部分章节末尾提到的高级教程。此外，我建议你看下面的资源：\n\n- Style guides: I have written [a guide to style guides][38]\n- [Underscore.js][39]: 一个弥补JavaScript标准库缺少的功能的库\n- [JSbooks – free JavaScript books][40]\n- [Frontend rescue: how to keep up to date on frontend technologies][41]\n- [http://yanhaijing.com][42] 当然还有我的博客也非常不错哦\n- [http://yanhaijing.com/es5][43] 如果你想成为高手，我建议阅读`ecmascript`规范\n- [给javascript初学者的24条最佳实践][44]\n- [我希望我知道的七个JavaScript技巧][45]\n\n参考自原文：http://www.2ality.com/2013/06/basic-javascript.html\n参考自译文：http://yanhaijing.com/basejs/\n\n  [1]: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\n  [2]: http://yanhaijing.com/javascript/2013/06/22/javascript-designing-a-language-in-10-days/\n  [3]: http://jquery.com/\n  [4]: http://extjs.org.cn/\n  [5]: http://underscorejs.org/\n  [6]: http://backbonejs.org/\n  [7]: https://statics.sh1a.qingstor.com/2020/11/29/js.png\n  [8]: https://github.com/\n  [9]: https://segmentfault.com/u/puyart\n  [10]: https://segmentfault.com/a/1190000003767058\n  [11]: https://nodejs.org/\n  [12]: http://nwjs.io/\n  [13]: http://electron.atom.io/\n  [14]: http://unity3d.com/cn/\n  [15]: http://www.cocos.com/doc/article/index?type=cocos2d-x&url=/doc/cocos-docs-master/manual/framework/cocos2d-js/catalog/../1-about-cocos2d-js/1-1-a-brief-history/zh.md\n  [16]: http://pomelo.netease.com/\n  [17]: https://www.phodal.com/blog/why-javascript-will-use-vr-world/\n  [18]: http://blog.jobbole.com/46055/\n  [19]: http://node-os.com/\n  [20]: http://www.2ality.com/2011/05/semicolon-insertion.html\n  [21]: http://yanhaijing.com/javascript/2014/01/05/exploring-the-abyss-of-null-and-undefined-in-javascript/\n  [22]: http://yanhaijing.com/javascript/2014/04/25/strict-equality-exemptions/\n  [23]: http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points\n  [24]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\n  [25]: http://yanhaijing.com/javascript/2013/12/28/demystifying-this-in-javascript\n  [26]: http://yanhaijing.com/javascript/2014/04/30/javascript-this-keyword\n  [27]: http://yanhaijing.com/javascript/2013/08/30/understanding-scope-and-context-in-javascript\n  [28]: http://yanhaijing.com/javascript/2014/04/30/JavaScript-Scoping-and-Hoisting\n  [29]: http://yanhaijing.com/javascript/2014/04/29/what-is-the-execution-context-in-javascript\n  [30]: http://yanhaijing.com/javascript/2013/08/23/javascript-inheritance-how-to-shoot-yourself-in-the-foot-with-prototypes\n  [31]: http://yanhaijing.com/javascript/2013/08/30/encapsulation-of-javascript\n  [32]: http://yanhaijing.com/javascript/2014/01/17/fun-with-javascript-native-array-functions\n  [33]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n  [34]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n  [35]: http://www.2ality.com/2011/08/json-api.html\n  [36]: https://developer.mozilla.org/en-US/docs/Web/API/console\n  [37]: https://nodejs.org/\n  [38]: http://www.2ality.com/2013/07/meta-style-guide.html\n  [39]: http://underscorejs.org/\n  [40]: http://jsbooks.revolunet.com/\n  [41]: http://uptodate.frontendrescue.org/\n  [42]: http://yanhaijing.com/\n  [43]: http://yanhaijing.com/es5\n  [44]: http://yanhaijing.com/javascript/2013/12/11/24-JavaScript-best-practices-for-beginners\n  [45]: http://yanhaijing.com/javascript/2014/04/23/seven-javascript-quirks-i-wish-id-known-about\n","slug":"前端/javascript基础学习","published":1,"updated":"2021-04-13T02:53:37.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknffl9r30008s8u16qvo84ke","content":"<h2 id=\"一、JavaScript介绍\"><a href=\"#一、JavaScript介绍\" class=\"headerlink\" title=\"一、JavaScript介绍\"></a>一、JavaScript介绍</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">JavaScript</a>是目前所有主流浏览器上唯一支持的脚本语言，这也是早期<code>JavaScript</code>的唯一用途。其主要作用是在不与服务器交互的情况下修改<code>HTML</code>页面内容，因此其最关键的部分是<code>DOM</code>（文档对象模型），也就是<code>HTML</code>元素的结构。通过<code>Ajax</code>可以使<code>HTML</code>页面通过<code>JavaScript</code>，在不重新加载页面的情况下从服务器上获取数据并显示，大幅提高用户体验。通过<code>JavaScript</code>，使<code>Web</code>页面发展成胖客户端成为可能。</p>\n<h3 id=\"语言的性质\"><a href=\"#语言的性质\" class=\"headerlink\" title=\"语言的性质\"></a>语言的性质</h3><p>本节对<code>JavaScript</code>的性质做简要介绍，以帮你理解一些疑问。</p>\n<p><code>JavaScript</code>和<code>ECMAScript</code>（JavaScript versus ECMAScript）<br>编程语言称为<code>JavaScript</code>，语言标准被称为<code>ECMAScript</code>。他们有不同名字的原因是因为“Java”已经被注册为商标（属于Oracle）。目前，只有<code>Mozilla</code>被正式允许使用“JavaScript”名称，因为很久以前他们得到一份许可。因此，开放的语言标准拥有不同的名字。当前的<code>JavaScript</code>版本是<code>ECMAScript 6</code>，<code>ECMAScript 7</code>当前是开发版。</p>\n<p><code>JavaScript</code>之父，<code>Brendan Eich</code><a href=\"http://yanhaijing.com/javascript/2013/06/22/javascript-designing-a-language-in-10-days/\">迅速了创建一门编程语言</a>。（否则，Netscape将使用其他技术）。他借鉴了几门其他语言的一些特性：</p>\n<ul>\n<li>JavaScript借鉴了Java的语法和如何区分原始值和对象。</li>\n<li>JavaScript的函数设计受Scheme和AWK的启发——他们（的函数）都是第一类（first-class）对象，并且在语言中广泛使用。闭包使他们（函数）变成强大的工具。</li>\n<li>Self影响了JavaScript独一无二的面向对象编程(OOP)风格。它的核心思想（在这里我们没有提到）非常优雅，基于此创建的语言非常少。但后面会提到一个简单的模式照顾大部分用例。JavaScript面向对象编程的杀手级特性是你可以直接创建对象。不需要先创建类或其他类似的东西。</li>\n<li>Perl和Python影响了JavaScript字符串，数组和正则表达式的操作。</li>\n</ul>\n<p><code>JavaScript</code>在最初的时候并不是一个完善的语言，因此也导致<code>JavaScript</code>遗留了很多令人诟病的问题。在开发稍大规模的应用时会显得力不从心，但是由于<code>JavaScript</code>本身是一种非常灵活的语言，因此在它的基础上开发程序库比较容易，因此出现了一大批非常优秀的第三方库，如<a href=\"http://jquery.com/\">jQuery</a>，<a href=\"http://extjs.org.cn/\">ExtJS</a>，<a href=\"http://underscorejs.org/\">underscorejs</a>，<a href=\"http://backbonejs.org/\">backbone</a>等等，由于这些第三方库，<code>JavaScript</code>变得非常简单。其中<code>jQuery</code>的使用非常广泛，它大幅简化了<code>DOM</code>和<code>Ajax</code>，已经成为了很多网站的标配。<code>jQuery</code>虽然基于<code>JavaScript</code>，但它提供了另外一种编程范式，也就是逻辑式编程，与<code>SQL</code>和正则表达式类似。</p>\n<h3 id=\"JavaScript能做什么\"><a href=\"#JavaScript能做什么\" class=\"headerlink\" title=\"JavaScript能做什么\"></a>JavaScript能做什么</h3><p><img src=\"https://statics.sh1a.qingstor.com/2020/11/29/js.png\" alt=\"JavaScript项目在Github所占比例\"></p>\n<p>如上图，<code>JavaScript</code>作为<a href=\"https://github.com/\">Github</a>上最流行、最火的编程语言，几乎无所不能。这里是<a href=\"https://segmentfault.com/u/puyart\">PuYart</a>的关于<a href=\"https://segmentfault.com/a/1190000003767058\"><code>JavaScript</code>就要统治世界了</a>的文章，可以让我们了解<code>JavaScript</code>到底能做什么的一些介绍。</p>\n<ol>\n<li>Web前端(各种前端工具类库、前端框架、动画效果、数据可视化等)</li>\n<li>服务端开发(<a href=\"https://nodejs.org/\">Node.js</a>)</li>\n<li>移动应用或者<code>Hybrid App</code>(Cordova)</li>\n<li>桌面应用(<a href=\"http://nwjs.io/\">NW.js</a>、<a href=\"http://electron.atom.io/\">Electron</a>)</li>\n<li>游戏(<a href=\"http://unity3d.com/cn/\">Unity3D</a>、<a href=\"http://www.cocos.com/doc/article/index?type=cocos2d-x&url=/doc/cocos-docs-master/manual/framework/cocos2d-js/catalog/../1-about-cocos2d-js/1-1-a-brief-history/zh.md\">Cocos2d-js</a>、<a href=\"http://pomelo.netease.com/\">Pomelo</a>)</li>\n<li>VR(<a href=\"https://www.phodal.com/blog/why-javascript-will-use-vr-world/\">JavaScript在VR世界的应用</a>)</li>\n<li>硬件、嵌入式物联网等(<a href=\"http://blog.jobbole.com/46055/\">Tessel：用JavaScript做嵌入式开发</a>)</li>\n<li>操作系统(<a href=\"http://node-os.com/\">NodeOS</a>)</li>\n</ol>\n<blockquote>\n<p>Atwood’s Law: any application that can be written in JavaScript, will eventually be written in JavaScript.(Atwood定律：凡是能用JavaScript写出来的，最终都会用JavaScript写出来。)</p>\n</blockquote>\n<h2 id=\"二、-JavaScript语法\"><a href=\"#二、-JavaScript语法\" class=\"headerlink\" title=\"二、 JavaScript语法\"></a>二、 JavaScript语法</h2><h3 id=\"语句和表达式\"><a href=\"#语句和表达式\" class=\"headerlink\" title=\"语句和表达式\"></a>语句和表达式</h3><p>了解<code>JavaScript</code>的语法，先来了解两个主要的语法类型：语句和表达式。</p>\n<ul>\n<li>语句通常是“做某些事情”。程序是一组语句的序列。举个例子，下面声明（创建）一个变量 <code>foo</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>表达式是产生“值”。他们通常位于赋值操作的右边、函数参数等。举个例子：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> * <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>语句和表达式之间的区别最好通过实例说明，<code>JavaScript</code>（像Java）有两种不同的方式实现<code>if-then-else</code>。一种是用语句：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (y &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    x = y;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    x = -y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一种是表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = y &gt;= <span class=\"number\">0</span> ? y : -y;</span><br></pre></td></tr></table></figure>\n\n<p>你可以将后者作为函数参数（但前者不行）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myFunction(y &gt;= <span class=\"number\">0</span> ? y : -y)</span><br></pre></td></tr></table></figure>\n\n<p>最后，每当<code>JavaScript</code>期待一个语句，你也可以用一个表达式代替。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(bar(<span class=\"number\">7</span>, <span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<p><code>foo(...);</code>是一个语句（也叫做表达式语句），<code>bar(7, 1)</code>则是一个表达式。他们都实现函数调用。</p>\n<h3 id=\"流程控制语句和语句块\"><a href=\"#流程控制语句和语句块\" class=\"headerlink\" title=\"流程控制语句和语句块\"></a>流程控制语句和语句块</h3><p>流程控制语句，其语句体可以是单条语句。举两个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj !== <span class=\"literal\">null</span>) obj.foo();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (x &gt; <span class=\"number\">0</span>) x--;</span><br></pre></td></tr></table></figure>\n\n<p>然而，任何语句总能被语句块代替，花括号包含零或多条语句。因此，你也可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    obj.foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    x--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为便于程序的阅读和维护，推荐使用后一种方式，即语句块方式。</p>\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><p><code>JavaScript</code>中的分号是<a href=\"http://www.2ality.com/2011/05/semicolon-insertion.html\">可选的</a>。但省略（分号）可能会带来意想不到的结果，所以我建议还是写上分号。</p>\n<p>正如上面所看到的，分号作为语句的结尾，但语句块不需要。仅有一种情况下你能看到语句块后面有分号——<strong>函数表达式后面的函数体块</strong>。<strong>表达式作为语句的结尾，后面是分号</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">3</span> * <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p><code>JavaScript</code>的注释有两种形式：单行注释和多行注释。单行注释以<code>//</code>开头，以换行符结尾：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x++; <span class=\"comment\">// 单行（single-line）注释</span></span><br></pre></td></tr></table></figure>\n\n<p>多行注释用<code>/**/</code>包裹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> 这是多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> 多行哦</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、变量和赋值\"><a href=\"#三、变量和赋值\" class=\"headerlink\" title=\"三、变量和赋值\"></a>三、变量和赋值</h2><p><code>JavaScript</code>中的变量在使用前必须先声明，否则会报错引用错误（Reference Error）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;  <span class=\"comment\">// 声明变量“foo”</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><p>你可以在声明变量的同时为其赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以给已经存在的变量重新赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo = <span class=\"number\">4</span>;  <span class=\"comment\">// 更改变量的值</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"复合赋值操作符\"><a href=\"#复合赋值操作符\" class=\"headerlink\" title=\"复合赋值操作符\"></a>复合赋值操作符</h3><p>有很多复合赋值操作符，例如+=。下面的两个赋值操作等价：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x += <span class=\"number\">1</span>;</span><br><span class=\"line\">x = x + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"标识符和变量名\"><a href=\"#标识符和变量名\" class=\"headerlink\" title=\"标识符和变量名\"></a>标识符和变量名</h3><p>标识符就是事物的名字，在<code>JavaScript</code>中他们扮演不同的语法角色。例如，变量的名称是一个标识符。</p>\n<p>大体上，标识符的第一个字符可以是任何<code>Unicode</code>字符、美元标志符（$）或下划线（_）。后面可以是任意字符和数字。因此，下面全是合法的标识符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arg0</span><br><span class=\"line\">_tmp</span><br><span class=\"line\">$elem</span><br><span class=\"line\">π</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>：首字符不能是数字，如果是数字的话，该如何区分是数字还是变量呢？</p>\n</blockquote>\n<p>一些标识符是“保留关键字”——他们是语法的一部分，不能用作变量名。从技术上讲，下面三个标识符不是保留字，但也不应该作为变量名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">Infinity</span> <span class=\"literal\">NaN</span> <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、值\"><a href=\"#四、值\" class=\"headerlink\" title=\"四、值\"></a>四、值</h2><p><code>JavaScript</code>有所有我们期待的编程语言值类型：布尔，数字，字符串，数组等。<code>JavaScript</code>中的所有值都有属性。每个属性有一个键（或名字）和一个值。你可以使用点（.）操作符读取属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value.propKey</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：字符串<code>abc</code>有属性<code>lenght</code>（长度）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.length); <span class=\"comment\">// 得到3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码也可以写成下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.length <span class=\"comment\">// 得到3</span></span><br></pre></td></tr></table></figure>\n\n<p>点操作符也可以用来给属性赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;  <span class=\"comment\">// 空对象</span></span><br><span class=\"line\">obj.foo = <span class=\"number\">123</span>; <span class=\"comment\">// 创建属性“foo”，设置它为123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.foo); <span class=\"comment\">// 得到123</span></span><br></pre></td></tr></table></figure>\n\n<p>你也可以通过它（.）调用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span>.toUpperCase(); <span class=\"comment\">// 得到HELLO</span></span><br></pre></td></tr></table></figure>\n\n<p>上面，我们在值<code>hello</code>上面调用方法<code>toUpperCase()</code>。</p>\n<h3 id=\"原始类型值和对象\"><a href=\"#原始类型值和对象\" class=\"headerlink\" title=\"原始类型值和对象\"></a>原始类型值和对象</h3><p>JavaScript定义了不同值之间的区别：</p>\n<ul>\n<li>原始值包括：<code>boolean</code>，<code>number</code>，<code>string</code>，<code>null</code>和<code>undefined</code>。</li>\n<li>所有其他的值都是对象。实际上对象被定义为——所有不为原始值的值。</li>\n</ul>\n<p>两者之间的主要区别在于他们是如何被比较的：每一个对象有一个独一无二的标志，并且仅和自己相等：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;  <span class=\"comment\">// 一个空对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;;  <span class=\"comment\">// 另一个空对象</span></span><br><span class=\"line\">obj1 === obj2   <span class=\"comment\">// false</span></span><br><span class=\"line\">obj1 === obj1   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>相反，所有原始值只要编码值相同就被认为是相同的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prim1 = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> prim2 = <span class=\"number\">123</span>;</span><br><span class=\"line\">prim1 === prim2 <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原始类型值\"><a href=\"#原始类型值\" class=\"headerlink\" title=\"原始类型值\"></a>原始类型值</h3><p>下面全是原始类型值（简称：原始值）：</p>\n<ul>\n<li><p>布尔类型：true，false</p>\n</li>\n<li><p>数字类型：1736，1.351</p>\n</li>\n<li><p>字符串类型: ‘abc’，”abc”</p>\n</li>\n<li><p>两个“无值（non-values）”：undefined，null<br>原始值的特征：</p>\n</li>\n<li><p><strong>值做比较时,“内容”做比较</strong>。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> === <span class=\"number\">3</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span> === <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>无法更改</strong>：值的属性无法更改，无法添加和移除属性，获取未知属性总返回undefined。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">str.foo = <span class=\"number\">3</span>; <span class=\"comment\">// try to create property `foo` ⇒ no effect</span></span><br><span class=\"line\">str.foo  <span class=\"comment\">// unknown property ⇒  undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><h4 id=\"对象的类型\"><a href=\"#对象的类型\" class=\"headerlink\" title=\"对象的类型\"></a>对象的类型</h4><p>所有非原始值的值都是对象。最常见的几种对象类型是：</p>\n<ul>\n<li>简单对象（类型是<code>Object</code>）能通过对象字面量创建：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    firstName: ‘Jane’,</span><br><span class=\"line\">    lastName: ‘Doe’</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的对象有两个属性：<code>firstName</code>属性的值是“Jane”，<code>lastName</code>属性的值是“Doe”。</p>\n<ul>\n<li>数组（类型是<code>Array</code>）能通过数组字面量创建：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ ‘apple’, ‘banana’, ‘cherry’ ]</span><br></pre></td></tr></table></figure>\n\n<p>上面的数组有三个元素，可以通过数字索引访问。例如“apple”的索引是0。</p>\n<ul>\n<li>正则表达式对象（类型是<code>RegExp</code>）能通过正则表达式字面量创建。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^a+b+$/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象的特征\"><a href=\"#对象的特征\" class=\"headerlink\" title=\"对象的特征\"></a>对象的特征</h4><ul>\n<li><strong>比较的是引用</strong>：比较的是标识符，每个值有自己的标识符。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125; === &#123;&#125;  <span class=\"comment\">// 两个不同的空对象, false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1;</span><br><span class=\"line\">obj1 === obj2   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>默认可以更改</strong>。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.foo = <span class=\"number\">123</span>;</span><br><span class=\"line\">obj.foo <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n\n<p>所有的数据结构（如数组）都是对象，但并不是所有的对象都是数据结构。例如：正则表达式是对象，但不是数据结构。</p>\n<h3 id=\"undefined-和-null\"><a href=\"#undefined-和-null\" class=\"headerlink\" title=\"undefined 和 null\"></a>undefined 和 null</h3><p><code>JavaScript</code>有两个“无值）”：<code>undefined</code>和<code>null</code>。</p>\n<p><code>undefined</code>的意思是“没有值”。未初始化的变量是<code>undefined</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>读取不存在的属性时，将返回<code>undefined</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">var</span> obj = &#123;&#125;; <span class=\"comment\">// 空对象</span></span><br><span class=\"line\">&gt; obj.foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>缺省的参数也是<code>undefined</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><code>null</code>的意思是“没有对象”。它被用来表示对象的无值（参数，链上的对象等）。</p>\n<p>通常情况下你应该把<code>undefined</code>和<code>null</code>看成是等价的，如果他们代表相同意义的无值的话。检查他们的一种方式是通过严格比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x === <span class=\"literal\">undefined</span> || x === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一种在实际中使用的方法是认为undefined 和 null 都是false：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!x) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>警告</strong>：false，0，NaN 和 “” 都被当作false。</p>\n</blockquote>\n<h3 id=\"包装类型\"><a href=\"#包装类型\" class=\"headerlink\" title=\"包装类型\"></a>包装类型</h3><p>对象类型的实例<code>Foo</code>（包括内建类型，例如Array和其他自定义类型）从对象<code>Foo.prototype</code>上获取方法。你可以通过读取这个方法的方式（不是调用）验证这点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[].push === <span class=\"built_in\">Array</span>.prototype.push  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>相反，<strong>原始类型是没有类型的，所以每个原始类型有一个关联类型，称之为包装类型</strong>：</p>\n<ul>\n<li>布尔值的包装类型是 Boolean。布尔值从Boolean.prototype上获取方法：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"literal\">true</span>.toString === <span class=\"built_in\">Boolean</span>.prototype.toString    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：包装类型名字的首字母是大写的B。如果在JavaScript中布尔值的类型可以访问，那么它可能会被转换为布尔对象。</p>\n</blockquote>\n<ul>\n<li>数字值的包装类型是<code>Number</code>。</li>\n<li>字符串值的包装类型是<code>String</code>。</li>\n</ul>\n<p>包装类型也有实例（他们的实例是对象），但不常用。相反，包装类型有其他用处：<strong>如果你将他们作为函数调用，他们可以将值转换为原始类型</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;123&#x27;</span>) <span class=\"comment\">//123</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">true</span>)  <span class=\"comment\">//&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过typeof和instanceof将值分类\"><a href=\"#通过typeof和instanceof将值分类\" class=\"headerlink\" title=\"通过typeof和instanceof将值分类\"></a>通过typeof和instanceof将值分类</h3><p>有两个操作符可以用来将值分类：<code>typeof</code>主要用于原始值，<code>instanceof</code>主要用于对象。</p>\n<h4 id=\"typeof-使用方法如下：\"><a href=\"#typeof-使用方法如下：\" class=\"headerlink\" title=\"typeof 使用方法如下：\"></a>typeof 使用方法如下：</h4><p><code>typeof «value»</code></p>\n<p><code>typeof</code>返回描述<code>value</code>“类型”的一个字符串。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> <span class=\"comment\">//&#x27;boolean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"comment\">//&#x27;string&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// 空对象字面量,&#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// 空数组字面量,&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面列出了<code>typeof</code>操作的所有结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作数 结果</span><br><span class=\"line\">undefined\t&#39;undefined&#39;</span><br><span class=\"line\">null\t&#39;object&#39;</span><br><span class=\"line\">Boolean value\t&#39;boolean&#39;</span><br><span class=\"line\">Number value\t&#39;number&#39;</span><br><span class=\"line\">String value\t&#39;string&#39;</span><br><span class=\"line\">Function\t&#39;function&#39;</span><br><span class=\"line\">All other values\t&#39;object&#39;</span><br></pre></td></tr></table></figure>\n\n<p>有两个结果和我们上面说的的原始值与对象是矛盾的：</p>\n<ul>\n<li>函数的类型是<code>function</code>而不是<code>object</code>。因为函数（类型为“function”）是对象（类型是对象）的子类型，这不是一个错误。</li>\n<li><code>null</code>的类型是<code>object</code>。这是一个bug，但从没被修复，因为修复后会破坏现有的代码。</li>\n</ul>\n<h4 id=\"instanceof使用方法如下：\"><a href=\"#instanceof使用方法如下：\" class=\"headerlink\" title=\"instanceof使用方法如下：\"></a>instanceof使用方法如下：</h4><p><code>«value» instanceof «Constr»</code></p>\n<p>如果<code>value</code>是一个对象，并且<code>value</code> 是由构造函数<code>Constr</code>创建的（参考：类）。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> Bar();  <span class=\"comment\">// 通过构造函数Bar创建对象</span></span><br><span class=\"line\">b <span class=\"keyword\">instanceof</span> Bar    <span class=\"comment\">//true</span></span><br><span class=\"line\">&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>    <span class=\"comment\">//true</span></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深入阅读\"><a href=\"#深入阅读\" class=\"headerlink\" title=\"深入阅读\"></a>深入阅读</h3><ul>\n<li><a href=\"http://yanhaijing.com/javascript/2014/01/05/exploring-the-abyss-of-null-and-undefined-in-javascript/\">探索JavaScript中Null和Undefined的深渊</a></li>\n</ul>\n<h2 id=\"五、布尔\"><a href=\"#五、布尔\" class=\"headerlink\" title=\"五、布尔\"></a>五、布尔</h2><p>布尔类型原始值包括<code>true</code>和<code>false</code>。下面的操作符会得到布尔值：</p>\n<ul>\n<li>二元逻辑运算符：&amp;&amp;（与），||（或）</li>\n<li>前缀逻辑运算符：!（非）</li>\n<li>等值运算符：=== !== == !=</li>\n<li>比较运算符（字符串或数字）：&gt; &gt;= &lt; &lt;=</li>\n</ul>\n<h3 id=\"真值和假值\"><a href=\"#真值和假值\" class=\"headerlink\" title=\"真值和假值\"></a>真值和假值</h3><p>每当<code>JavaScript</code>希望一个布尔值时（例如：if语句的条件），可以使用任何值。它将被理解（转换）为<code>true</code>或<code>false</code>。下面的值被理解为<code>false</code>：</p>\n<ul>\n<li>undefined, null</li>\n<li>布尔: false</li>\n<li>数字: 0, NaN</li>\n<li>字符串: ‘’</li>\n</ul>\n<p>所有其他值被认为<code>true</code>。被理解为<code>false</code>的值称为假值，被理解为<code>true</code>的值称为真值。可以使用<code>Boolean</code>作为函数，测试值被理解为什么。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">undefined</span>)  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"number\">0</span>)    <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"number\">3</span>)    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二元逻辑运算符\"><a href=\"#二元逻辑运算符\" class=\"headerlink\" title=\"二元逻辑运算符\"></a>二元逻辑运算符</h3><p><code>JavaScript</code>中的<strong>二元逻辑运算符是短路运算</strong>——如果第一个操作数可以确定结果，第二个操作数将不被验证（运算）。例如，在下面的代码中，函数<code>foo()</code>永远不会被调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> &amp;&amp; foo()</span><br><span class=\"line\"><span class=\"literal\">true</span> || foo()</span><br></pre></td></tr></table></figure>\n\n<p>此外，<strong>二元逻辑运算符会返回操作数中的一个</strong>，可能是一个布尔值，也可能不是。</p>\n<ul>\n<li><strong>与</strong>：如果第一个操作数是假值，返回第一个。否则返回第二个操作数。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> &amp;&amp; <span class=\"string\">&#x27;abc&#x27;</span>    <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"number\">123</span> &amp;&amp; <span class=\"string\">&#x27;abc&#x27;</span>    <span class=\"comment\">//&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>或</strong>：如果第一个操作数是真值，返回第一个。否则，返回第二个操作数。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span> || <span class=\"number\">123</span>    <span class=\"comment\">//&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> || <span class=\"number\">123</span>   <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等值运算符\"><a href=\"#等值运算符\" class=\"headerlink\" title=\"等值运算符\"></a>等值运算符</h3><p>在<code>JavaScript</code>中检测相等，你可以使用严格相等（<code>===</code>）和严格不等（<code>!==</code>）。或者你也可以使用非严格相等（<code>==</code>）和非严格不等（<code>!=</code>）。</p>\n<blockquote>\n<p><strong>经验规则：总是用严格运算符，假装非严格运算符不存在。严格相等更安全。</strong></p>\n</blockquote>\n<h3 id=\"深入阅读-1\"><a href=\"#深入阅读-1\" class=\"headerlink\" title=\"深入阅读\"></a>深入阅读</h3><ul>\n<li><a href=\"http://yanhaijing.com/javascript/2014/04/25/strict-equality-exemptions/\">在JavaScript中什么时候使用==是正确的？</a></li>\n</ul>\n<h2 id=\"六、数字\"><a href=\"#六、数字\" class=\"headerlink\" title=\"六、数字\"></a>六、数字</h2><p><code>JavaScript</code>中的<strong>所有数字都是浮点型</strong>（虽然大部分的JavaScript引擎内部也使用整数）。至于为什么这样设计，查看这里（<a href=\"http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points\">每一个JavaScript开发者应该了解的浮点知识</a>）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> === <span class=\"number\">1.0</span>   <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>特殊数字：</p>\n<ul>\n<li><code>NaN</code> (“不是一个数字 not a number”): 错误值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;xyz&#x27;</span>)  <span class=\"comment\">// &#x27;xyz&#x27; 不能被转换为数字得到:NaN</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Infinity</code>：也是最大错误值（无穷大）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> / <span class=\"number\">0</span>   <span class=\"comment\">//Infinity</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">1024</span>)  <span class=\"comment\">// 数字太大了,得到Infinity</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Infinity</code>有时很有用，因为它比任何其他数字都大。同样，<code>-Infinity</code> 比其他任何数字都小。</p>\n<ul>\n<li><code>JavaScript</code>有两个零，<code>+0</code>和<code>-0</code>。它（js引擎）通常不让你看到，并简单将两个零都显示为0：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span>  <span class=\"comment\">//0</span></span><br><span class=\"line\">-<span class=\"number\">0</span>  <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<p>因此最好假装只有一个零（正如我们看到假值时所做的那样：**-0 和 +0 都是假值**）。</p>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p><code>JavaScript</code>中有下列算数运算符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加: number1 + number2</span><br><span class=\"line\">减: number1 - number2</span><br><span class=\"line\">乘: number1 * number2</span><br><span class=\"line\">除: number1 / number2</span><br><span class=\"line\">模: number1 % number2</span><br><span class=\"line\">自增: ++variable, variable++</span><br><span class=\"line\">自减: –variable, variable–</span><br><span class=\"line\">负值: -value</span><br><span class=\"line\">正值（转换为数字）: +value</span><br></pre></td></tr></table></figure>\n\n<p>全局对象<code>Math</code>通过函数提供更多算数运算操作。</p>\n<p><code>JavaScript</code>中也有位运算符（例如：&amp;）。</p>\n<h2 id=\"七、字符串\"><a href=\"#七、字符串\" class=\"headerlink\" title=\"七、字符串\"></a>七、字符串</h2><p>字符串可以直接通过字符串字面量创建。这些字面量被单引号或双引号包裹。反斜线（\\）转义字符并且产生一些控制字符。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;Did she say &quot;Hello&quot;?&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;Did she say \\&quot;Hello\\&quot;?&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;That\\&#x27;s nice!&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;That&#x27;s nice!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;Line 1\\nLine 2&#x27;</span>  <span class=\"comment\">// 换行</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Backlash: \\\\&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以通过方括号访问单个字符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">str[<span class=\"number\">1</span>]    <span class=\"comment\">//&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>length</code>属性是字符串的字符数量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.length  <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>提醒</strong>：字符串是不可变的，如果你想改变现有字符串，你需要创建一个新的字符串。</p>\n</blockquote>\n<h3 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h3><p>字符串可以通过加号操作符（+）拼接，如果其中一个操作数为字符串，会将另一个操作数也转换为字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> msgCount = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"string\">&#x27;You have &#x27;</span>+ msgCount + <span class=\"string\">&#x27; messages&#x27;</span> <span class=\"comment\">//&#x27;You have 3 messages&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>连续执行拼接操作可以使用<code>+=</code>操作符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">str += <span class=\"string\">&#x27;Multiple &#x27;</span>;</span><br><span class=\"line\">str += <span class=\"string\">&#x27;pieces &#x27;</span>;</span><br><span class=\"line\">str += <span class=\"string\">&#x27;are concatenated.&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">//&#x27;Multiple pieces are concatenated.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3><p>字符串有许多有用的方法。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.slice(<span class=\"number\">1</span>)  <span class=\"comment\">// 复制子字符串,得到索引1及其之后的字符串，即：&#x27;bc&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.slice(<span class=\"number\">1</span>, <span class=\"number\">2</span>)   <span class=\"comment\">//得到索引1和2之间的字符串，即：&#x27;b&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;\\t xyz  &#x27;</span>.trim()  <span class=\"comment\">// 移除空白字符，即：&#x27;xyz&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;mjölnir&#x27;</span>.toUpperCase()   <span class=\"comment\">//转成大写，即：&#x27;MJÖLNIR&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.indexOf(<span class=\"string\">&#x27;b&#x27;</span>)  <span class=\"comment\">// 查找第一个b的索引，即：1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.indexOf(<span class=\"string\">&#x27;x&#x27;</span>)    <span class=\"comment\">//没有返回-1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、语句\"><a href=\"#八、语句\" class=\"headerlink\" title=\"八、语句\"></a>八、语句</h2><h3 id=\"条件（Conditionals）\"><a href=\"#条件（Conditionals）\" class=\"headerlink\" title=\"条件（Conditionals）\"></a>条件（Conditionals）</h3><p><code>if</code>语句通过布尔条件决定执行那个分支：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (myvar === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (myvar === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// else</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (myvar === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (myvar === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// else-if</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (myvar === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// else-if</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// else</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的<code>switch</code>语句，furit的值决定那个分支被执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (fruit) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;banana&#x27;</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;apple&#x27;</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:  <span class=\"comment\">// 所有其他情况</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"循环（Loops）\"><a href=\"#循环（Loops）\" class=\"headerlink\" title=\"循环（Loops）\"></a>循环（Loops）</h3><p>for 循环的格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(初始化; 当条件成立时循环; 下一步操作)</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当条件成立时<code>while</code>循环继续循环它的循环体。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和上面的for循环相等</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; arr.length) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当条件成立时，<code>do-while</code>循环继续循环。由于条件位于循环体之后，所以循环体总是被至少至少执行一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span>(条件);</span><br></pre></td></tr></table></figure>\n\n<p>在所有的循环中：</p>\n<ul>\n<li>break中断循环</li>\n<li>continue开始一个新的循环迭代</li>\n</ul>\n<h2 id=\"九、函数\"><a href=\"#九、函数\" class=\"headerlink\" title=\"九、函数\"></a>九、函数</h2><p>定义函数的一种方法是通过函数声明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">param1, param2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> param1 + param2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码定义一个名称叫做<code>add</code>的函数，有两个参数<code>param1</code>和<code>param2</code>，并且返回参数的和。下面是如何调用这个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">6</span>, <span class=\"number\">1</span>)   <span class=\"comment\">//7</span></span><br><span class=\"line\">add(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>)   <span class=\"comment\">//&#x27;ab&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>另一种定义<code>add()</code>函数的方法是通过函数表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param1, param2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> param1 + param2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>函数表达式产生一个值，因此可以直接将函数作为参数传递给其他函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">someOtherFunction(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1, p2</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数声明提升\"><a href=\"#函数声明提升\" class=\"headerlink\" title=\"函数声明提升\"></a>函数声明提升</h3><p>函数声明会被提升，他们全被移动到当前作用域开始之处。这允许你在函数声明之前调用它们：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    bar();  <span class=\"comment\">// 没问题，bar被提升</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>：虽然变量声明也会被提升，但赋值的过程不会被提升：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    bar();  <span class=\"comment\">// 有问题，bar是undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特殊变量参数\"><a href=\"#特殊变量参数\" class=\"headerlink\" title=\"特殊变量参数\"></a>特殊变量参数</h3><p><strong>在<code>JavaScript</code>中你可以调用任意函数并传递任意数量的参数</strong>——语言绝不会“抱怨”（参数检测）。都可以正常工作，然而，使所有参数可访问需要通过特殊变量<code>arguments</code>。<code>arguments</code>看起来像数组，但它没有数组的方法（称为类数组 array-like）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = f(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">args.length <span class=\"comment\">//3</span></span><br><span class=\"line\">args[<span class=\"number\">0</span>]  <span class=\"comment\">// 获取索引为0的元素,&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"太多或太少参数\"><a href=\"#太多或太少参数\" class=\"headerlink\" title=\"太多或太少参数\"></a>太多或太少参数</h3><p>让我们通过下面的函数探索<code>JavaScript</code>中传递太多或太少参数时如何处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多出的参数将被忽略（可以通过<code>arguments</code>访问）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>)    <span class=\"comment\">//a b</span></span><br></pre></td></tr></table></figure>\n\n<p>缺少的参数将会是<code>undefined</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(<span class=\"string\">&#x27;a&#x27;</span>)    <span class=\"comment\">//a undefined</span></span><br><span class=\"line\">f() <span class=\"comment\">//undefined undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><p>下面是一个常见模式，给参数设置默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pair</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    x = x || <span class=\"number\">0</span>;  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">    y = y || <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [ x, y ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>（*）</code>这行，如果x是真值（除了：<code>null</code>，<code>undefined</code> 等），         操作符返回x。否则，它返回第二个操作数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pair()  <span class=\"comment\">//[ 0, 0 ]</span></span><br><span class=\"line\">pair(<span class=\"number\">3</span>) <span class=\"comment\">//[ 3, 0 ]</span></span><br><span class=\"line\">pair(<span class=\"number\">3</span>, <span class=\"number\">5</span>)  <span class=\"comment\">//[ 3, 5 ]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"强制数量\"><a href=\"#强制数量\" class=\"headerlink\" title=\"强制数量\"></a>强制数量</h3><p>如果你想强制参数的数量，你可以检测<code>arguments.length</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pair</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length !== <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Need exactly 2 arguments&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将arguments-转换为数组\"><a href=\"#将arguments-转换为数组\" class=\"headerlink\" title=\"将arguments 转换为数组\"></a>将arguments 转换为数组</h3><p><code>arguments</code>不是一个数组，它仅仅是类数组（array-like）：它有一个<code>length</code>属性，并且你可以通过方括号索引方式访问它的元素。然而，你不能移除元素，或在它上面调用任何数组方法。因此，有时你需要将其转换为数组。这就是下面函数的作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toArray</span>(<span class=\"params\">arrayLikeObject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [].slice.call(arrayLikeObject);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十、异常处理\"><a href=\"#十、异常处理\" class=\"headerlink\" title=\"十、异常处理\"></a>十、异常处理</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">异常处理</a>最常见的方式像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throwException</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Problem!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    throwException();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);  <span class=\"comment\">// 错误：信息</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.stack);  <span class=\"comment\">// 非标准，但大部分浏览器支持</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>try分支包裹易出错的代码，如果try分支内部抛出异常，catch分支将会执行。</p>\n<h2 id=\"十一、严格模式\"><a href=\"#十一、严格模式\" class=\"headerlink\" title=\"十一、严格模式\"></a>十一、严格模式</h2><p>严格模式开启检测和一些其他措施，使<code>JavaScript</code>变成更整洁的语言。推荐使用严格模式。为了开启严格模式，只需在<code>JavaScript</code>文件或<code>script</code>标签第一行添加如下语句：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以在每个函数上选择性开启严格模式，只需将上面的代码放在函数的开头：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionInStrictMode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的两小节看下严格模式的三大好处。</p>\n<h3 id=\"明确错误\"><a href=\"#明确错误\" class=\"headerlink\" title=\"明确错误\"></a>明确错误</h3><p>让我们看一个例子，严格模式给我们明确的错误，否则<code>JavaScript</code>总是静默失败：下面的函数<code>f()</code> 执行一些非法操作，它试图更改所有字符串都有的只读属性——<code>length</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;abc&#x27;</span>.length = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当你调用上面的函数，它静默失败，赋值操作被简单忽略。让我们将<code>f()</code>在严格模式下运行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f_strict</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"string\">&#x27;abc&#x27;</span>.length = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在浏览器报给我们一些错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f_strict()  <span class=\"comment\">// TypeError: Cannot assign to read only property &#x27;length&#x27; of abc</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不是方法的函数中的this\"><a href=\"#不是方法的函数中的this\" class=\"headerlink\" title=\"不是方法的函数中的this\"></a>不是方法的函数中的this</h3><p>在严格模式下，不作为方法的函数中的<code>this</code>值是<code>undefined</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f_strict</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f_strict() === <span class=\"literal\">undefined</span>);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>在非严格模式下，<code>this</code>的值是被称作全局对象（<code>global object</code>）（在浏览器里是<code>window</code>）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f() === <span class=\"built_in\">window</span>);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不再自动创建全局变量\"><a href=\"#不再自动创建全局变量\" class=\"headerlink\" title=\"不再自动创建全局变量\"></a>不再自动创建全局变量</h3><p>在非严格模式下，如果你给不存在的变量赋值，<code>JavaScript</code>会自动创建一个全局变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; foo = <span class=\"number\">5</span> &#125;</span><br><span class=\"line\">f()  <span class=\"comment\">// 不会报错</span></span><br><span class=\"line\">foo <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<p>在严格模式下，这会产生一个错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f_strict</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"string\">&#x27;use strict&#x27;</span>; foo2 = <span class=\"number\">4</span>; &#125;</span><br><span class=\"line\">f_strict()  <span class=\"comment\">// ReferenceError: foo2 is not defined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深入阅读-2\"><a href=\"#深入阅读-2\" class=\"headerlink\" title=\"深入阅读\"></a>深入阅读</h3><ul>\n<li><a href=\"http://yanhaijing.com/javascript/2013/12/28/demystifying-this-in-javascript\">揭秘javascript中谜一样的this</a></li>\n<li><a href=\"http://yanhaijing.com/javascript/2014/04/30/javascript-this-keyword\">JavaScript中的this关键字</a></li>\n</ul>\n<h2 id=\"十二、变量作用域和闭包\"><a href=\"#十二、变量作用域和闭包\" class=\"headerlink\" title=\"十二、变量作用域和闭包\"></a>十二、变量作用域和闭包</h2><p>在<code>JavaScript</code>中，你必须使用变量之前，通过<code>var</code>声明变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\">x = <span class=\"number\">3</span>;</span><br><span class=\"line\">y = <span class=\"number\">4</span>;  <span class=\"comment\">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以用一条<code>var</code>语句声明和初始化多个变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">2</span>, z = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但我建议每个变量使用一条语句。因此，我将上面的语句重写为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> z = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>由于提升（见下文），最好在函数顶部声明变量。</p>\n<h3 id=\"变量和函数作用域\"><a href=\"#变量和函数作用域\" class=\"headerlink\" title=\"变量和函数作用域\"></a>变量和函数作用域</h3><p>变量的作用域总是整个函数（没有块级作用域）。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = -<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = -x;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);  <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到tmp变量不仅在（*）所在行的语句块存在，它在整个函数内都存在。</p>\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>变量声明会被提升：声明会被移到函数的顶部，但赋值过程不会。举个例子，在下面的函数中<code>（*）</code>行位置声明了一个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = <span class=\"number\">3</span>;  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在内部，上面的函数被执行像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp;  <span class=\"comment\">// declaration is hoisted</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        tmp = <span class=\"number\">3</span>;  <span class=\"comment\">// assignment stays put</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>每个函数保持和函数体内部变量的连接，甚至离开创建它的作用域之后。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIncrementor</span>(<span class=\"params\">start</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> start++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>（*）</code>行开始的函数在它创建时保留上下文，并在内部保存一个<code>start</code>活动值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inc = createIncrementor(<span class=\"number\">5</span>);</span><br><span class=\"line\">inc()   <span class=\"comment\">// 5</span></span><br><span class=\"line\">inc() <span class=\"comment\">// 6</span></span><br><span class=\"line\">inc()   <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n\n<p>闭包是一个函数加上和其作用域链的链接。因此，<code>createIncrementor()</code>返回的是一个闭包。</p>\n<h3 id=\"IIFE：模拟块级作用域\"><a href=\"#IIFE：模拟块级作用域\" class=\"headerlink\" title=\"IIFE：模拟块级作用域\"></a>IIFE：模拟块级作用域</h3><p>有时你想模拟一个块，例如你想将变量从全局作用域隔离。完成这个工作的模式叫做 <code>IIFE</code>(立即执行函数表达式(<code>Immediately Invoked Function Expression</code>))：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 块开始</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = ...;  <span class=\"comment\">// 非全局变量</span></span><br><span class=\"line\">&#125;());  <span class=\"comment\">// 块结束</span></span><br></pre></td></tr></table></figure>\n\n<p>上面你会看到函数表达式被立即执行。外面的括号用来阻止它被解析成函数声明；只有函数表达式能被立即调用。函数体产生一个新的作用域并使<code>tmp</code>变为局部变量。</p>\n<h3 id=\"闭包实现变量共享\"><a href=\"#闭包实现变量共享\" class=\"headerlink\" title=\"闭包实现变量共享\"></a>闭包实现变量共享</h3><p>下面是个经典问题，如果你不知道，会让你费尽思量。因此，先浏览下，对问题有个大概的了解。</p>\n<p>闭包保持和外部变量的连接，有时可能和你想像的行为不一致：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    result.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> i &#125;);  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result[<span class=\"number\">1</span>]()); <span class=\"comment\">// 5 (不是 1)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result[<span class=\"number\">3</span>]()); <span class=\"comment\">// 5 (不是 3)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>(*)</code>行的返回值总是当前的i值，而不是当函数被创建时的i值。当循环结束后，i的值是5，这是为什么数组中的所有函数的返回值总是一样的。如果你想捕获当前变量的快照，你可以使用<code>IIFE</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i2</span>) </span>&#123;</span><br><span class=\"line\">        result.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> i2 &#125;);</span><br><span class=\"line\">    &#125;(i));  <span class=\"comment\">// 复制当前的i</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>深入阅读</p>\n<ul>\n<li><a href=\"http://yanhaijing.com/javascript/2013/08/30/understanding-scope-and-context-in-javascript\">认识javascript中的作用域和上下文</a></li>\n<li><a href=\"http://yanhaijing.com/javascript/2014/04/30/JavaScript-Scoping-and-Hoisting\">JavaScript的作用域和提升机制</a></li>\n<li><a href=\"http://yanhaijing.com/javascript/2014/04/29/what-is-the-execution-context-in-javascript\">了解JavaScript的执行上下文</a></li>\n</ul>\n<h2 id=\"十三、对象和继承\"><a href=\"#十三、对象和继承\" class=\"headerlink\" title=\"十三、对象和继承\"></a>十三、对象和继承</h2><p>和所有的值类型一样，对象有属性。事实上，你可以将对象当作一组属性的集合，每个属性都是一对（键和值）。键是字符串，值可以是任意<code>JavaScript</code>值。到目前为止，我们仅仅见过键是标识符的属性，因为点操作符处理的键必须为标识符。在这节，你讲见到另一种访问属性的方法，能将任意字符串作为键。</p>\n<h3 id=\"单个对象\"><a href=\"#单个对象\" class=\"headerlink\" title=\"单个对象\"></a>单个对象</h3><p>在<code>JavaScript</code>中，你可以直接创建对象，通过对象字面量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jane = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Jane&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    describe: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">        &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Person named &#x27;</span>+<span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面的对象有两个属性：<code>name</code>和<code>describe</code>。你能读（“get”）和 写（“set”）属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jane.name  <span class=\"comment\">// get，&#x27;Jane&#x27;</span></span><br><span class=\"line\">jane.name = <span class=\"string\">&#x27;John&#x27;</span>;  <span class=\"comment\">// set</span></span><br><span class=\"line\">jane.newProperty = <span class=\"string\">&#x27;abc&#x27;</span>;  <span class=\"comment\">// 自动创建</span></span><br></pre></td></tr></table></figure>\n\n<p>属性是函数如<code>describe</code>可以被当作方法调用。当调用他们时可以在它们内部通过this引用对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jane.describe()  <span class=\"comment\">// 调用方法,&#x27;Person named John&#x27;</span></span><br><span class=\"line\">jane.name = <span class=\"string\">&#x27;Jane&#x27;</span>;</span><br><span class=\"line\">jane.describe() <span class=\"comment\">// &#x27;Person named Jane&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>in</code>操作符用来检测一个属性是否存在：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;newProperty&#x27;</span> <span class=\"keyword\">in</span> jane   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;foo&#x27;</span> <span class=\"keyword\">in</span> jane   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>若读取一个不存在的属性，将会得到<code>undefined</code>值。因此上面的两个检查也可以像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jane.newProperty !== <span class=\"literal\">undefined</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\">jane.foo !== <span class=\"literal\">undefined</span>  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>delete</code>操作符用来删除一个属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> jane.newProperty <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;newProperty&#x27;</span> <span class=\"keyword\">in</span> jane   <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"任意键属性\"><a href=\"#任意键属性\" class=\"headerlink\" title=\"任意键属性\"></a>任意键属性</h3><p>属性的键可以是任意字符串。到目前为止，我们看到的对象字面量中的和点操作符后的属性关键字。按这种方法你只能使用标识符。如果你想用其他任意字符串作为键名，你必须在对象字面量里加上引号，并使用方括号获取和设置属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"string\">&#x27;not an identifier&#x27;</span>: <span class=\"number\">123</span> &#125;;</span><br><span class=\"line\">obj[<span class=\"string\">&#x27;not an identifier&#x27;</span>]    <span class=\"comment\">//123</span></span><br><span class=\"line\">obj[<span class=\"string\">&#x27;not an identifier&#x27;</span>] = <span class=\"number\">456</span>;</span><br></pre></td></tr></table></figure>\n\n<p>方括号允许你动态计算属性关键字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">&#x27;name&#x27;</span>;</span><br><span class=\"line\">jane[x]; <span class=\"comment\">// &#x27;Jane&#x27;</span></span><br><span class=\"line\">jane[<span class=\"string\">&#x27;na&#x27;</span>+<span class=\"string\">&#x27;me&#x27;</span>]; <span class=\"comment\">// &#x27;Jane&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用方法\"><a href=\"#引用方法\" class=\"headerlink\" title=\"引用方法\"></a>引用方法</h3><p>如果你引用一个方法，它将失去和对象的连接。就其本身而言，函数不是方法，其中的<code>this</code>值为<code>undefined</code>（严格模式下）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = jane.describe;</span><br><span class=\"line\">func()  <span class=\"comment\">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>解决办法是使用函数内置的<code>bind()</code>方法。它创建一个新函数，其<code>this</code>值固定为给定的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func2 = jane.describe.bind(jane);</span><br><span class=\"line\">func2() <span class=\"comment\">// &#x27;Person named Jane&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法内部的函数\"><a href=\"#方法内部的函数\" class=\"headerlink\" title=\"方法内部的函数\"></a>方法内部的函数</h3><p>每个函数都有一个特殊变量<code>this</code>。如果你在方法内部嵌入函数是很不方便的，因为你不能从函数中访问方法的<code>this</code>。下面是一个例子，我们调用<code>forEach</code>循环一个数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jane = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Jane&#x27;</span>,</span><br><span class=\"line\">    friends: [ <span class=\"string\">&#x27;Tarzan&#x27;</span>, <span class=\"string\">&#x27;Cheeta&#x27;</span> ],</span><br><span class=\"line\">    logHiToFriends: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">        &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">friend</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里的“this”是undefined</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name + <span class=\"string\">&#x27; says hi to &#x27;</span> + friend);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用<code>logHiToFriends</code>会产生错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jane.logHiToFriends()   <span class=\"comment\">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>有两种方法修复这问题。</p>\n<ul>\n<li>将<code>this</code>存储在不同的变量。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logHiToFriends: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">friend</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(that.name + <span class=\"string\">&#x27; says hi to &#x27;</span> + friend);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>forEach的第二个参数允许提供<code>this</code>值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logHiToFriends: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">friend</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name + <span class=\"string\">&#x27; says hi to &#x27;</span> + friend);</span><br><span class=\"line\">    &#125;, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>JavaScript</code>中函数表达式经常被用作函数参数。时刻小心函数表达式中的<code>this</code>。</p>\n<h3 id=\"构造函数：对象工厂\"><a href=\"#构造函数：对象工厂\" class=\"headerlink\" title=\"构造函数：对象工厂\"></a>构造函数：对象工厂</h3><p>除了作为“真正”的函数和方法，函数还在JavaScript中扮演第三种角色：<strong>如果通过new操作符调用，他们会变为构造函数，对象的工厂</strong>。构造函数是对其他语言中的类的粗略模拟。约定俗成，构造函数的第一个字母大写。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置实例数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法</span></span><br><span class=\"line\">Point.prototype.dist = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(<span class=\"built_in\">this</span>.x*<span class=\"built_in\">this</span>.x + <span class=\"built_in\">this</span>.y*<span class=\"built_in\">this</span>.y);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们看到构造函数分为两部分：首先，<code>Point</code>函数设置实例数据。其次，<code>Point.prototype</code>属性包含对象的方法。前者的数据是每个实例私有的，后面的数据是所有实例共享的。</p>\n<p>我们通过new操作符调用<code>Point</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">p.x <span class=\"comment\">//3</span></span><br><span class=\"line\">p.dist();    <span class=\"comment\">//5.830951894845301</span></span><br></pre></td></tr></table></figure>\n\n<p>p是<code>Point</code>的一个实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"keyword\">instanceof</span> Point  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> p    <span class=\"comment\">//&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深入阅读-3\"><a href=\"#深入阅读-3\" class=\"headerlink\" title=\"深入阅读\"></a>深入阅读</h3><ul>\n<li><a href=\"http://yanhaijing.com/javascript/2013/08/23/javascript-inheritance-how-to-shoot-yourself-in-the-foot-with-prototypes\">Javascript继承 原型的陷阱</a></li>\n<li><a href=\"http://yanhaijing.com/javascript/2013/08/30/encapsulation-of-javascript\">Javascript 封装问题</a></li>\n</ul>\n<h2 id=\"十四、数组\"><a href=\"#十四、数组\" class=\"headerlink\" title=\"十四、数组\"></a>十四、数组</h2><p>数组是数组元素的序列，能通过整数索引方法数组元素，数组索引从0开始。</p>\n<h3 id=\"数组字面量\"><a href=\"#数组字面量\" class=\"headerlink\" title=\"数组字面量\"></a>数组字面量</h3><p>数组字面量创建数组很方便：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">var</span> arr = [ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span> ];</span><br></pre></td></tr></table></figure>\n\n<p>上面的数组有三个元素：分别是字符串“a”，“b”， “c”。你可以通过整数索引访问它们：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[<span class=\"number\">0</span>]  <span class=\"comment\">//&#x27;a&#x27;</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\">arr</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;x&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>length</code>属性总表示一个数组有多少项元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.length    <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>除此之外它也可以用来从数组上移除尾部元素：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.length = <span class=\"number\">2</span>;</span><br><span class=\"line\">arr <span class=\"comment\">// [ &#x27;x&#x27;, &#x27;b&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>in</code>操作符也可以在数组上工作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">in</span> arr <span class=\"comment\">// arr在索引为1处是否有元素？,true</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"keyword\">in</span> arr <span class=\"comment\">// arr在索引为5处是否有元素？false</span></span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是数组是对象，因此可以有对象属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.foo = <span class=\"number\">123</span>;</span><br><span class=\"line\">arr.foo   <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h3><p>数组有许多方法。举些例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(<span class=\"number\">1</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 复制元素，[ &#x27;b&#x27; ]</span></span><br><span class=\"line\">arr.slice(<span class=\"number\">1</span>)    <span class=\"comment\">// [ &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.push(<span class=\"string\">&#x27;x&#x27;</span>)  <span class=\"comment\">// 在末尾添加一个元素，4</span></span><br><span class=\"line\">arr <span class=\"comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;x&#x27; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.pop()  <span class=\"comment\">// 移除最后一个元素，&#x27;x&#x27;</span></span><br><span class=\"line\">arr   <span class=\"comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.shift()  <span class=\"comment\">// 移除第一个元素，&#x27;a&#x27;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [ &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.unshift(<span class=\"string\">&#x27;x&#x27;</span>)  <span class=\"comment\">// 在前面添加一个元素，3</span></span><br><span class=\"line\">arr <span class=\"comment\">// [ &#x27;x&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.indexOf(<span class=\"string\">&#x27;b&#x27;</span>)  <span class=\"comment\">// 查找给定项在数组中的索引，若不存在返回-1，</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">arr.indexOf(<span class=\"string\">&#x27;y&#x27;</span>)  <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.join(<span class=\"string\">&#x27;-&#x27;</span>)  <span class=\"comment\">// 将元素拼接为一个字符串，&#x27;x-b-c&#x27;</span></span><br><span class=\"line\">arr.join(<span class=\"string\">&#x27;&#x27;</span>)    <span class=\"comment\">// &#x27;xbc&#x27;</span></span><br><span class=\"line\">arr.join()  <span class=\"comment\">// &#x27;x,b,c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h3><p>有几种方法可以遍历数组元素。其中两个最重要的是<code>forEach</code>和<code>map</code>。</p>\n<p><code>forEach</code>遍历整个数组，并将当前元素和它的索引传递给一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span> ].forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elem, index</span>) </span>&#123;  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index + <span class=\"string\">&#x27;. &#x27;</span> + elem);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码的输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.</span> a</span><br><span class=\"line\"><span class=\"number\">1.</span> b</span><br><span class=\"line\"><span class=\"number\">2.</span> c</span><br></pre></td></tr></table></figure>\n\n<p>注意<code>（*）</code>行的函数参数是可省略的。例如：它可以只有一个参数<code>elem</code>。</p>\n<p><code>map</code>创建一个新数组，通过给每个存在数组元素应用一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*x</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// [ 1, 4, 9 ]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深入阅读-4\"><a href=\"#深入阅读-4\" class=\"headerlink\" title=\"深入阅读\"></a>深入阅读</h3><ul>\n<li><a href=\"http://yanhaijing.com/javascript/2014/01/17/fun-with-javascript-native-array-functions\">有趣的javascript原生数组函数</a></li>\n</ul>\n<h2 id=\"十五、正则表达式\"><a href=\"#十五、正则表达式\" class=\"headerlink\" title=\"十五、正则表达式\"></a>十五、正则表达式</h2><p><code>JavaScript</code>内建支持正则表达式。他们被双斜线分隔：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^abc$/</span><br><span class=\"line\">/[A-Za-z0-<span class=\"number\">9</span>]+/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法-test-：测试是否匹配\"><a href=\"#方法-test-：测试是否匹配\" class=\"headerlink\" title=\"方法 test()：测试是否匹配\"></a>方法 test()：测试是否匹配</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^a+b+$/.test(<span class=\"string\">&#x27;aaab&#x27;</span>)   <span class=\"comment\">// true</span></span><br><span class=\"line\">/^a+b+$/.test(<span class=\"string\">&#x27;aaa&#x27;</span>)    <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法-exec-：匹配和捕获组\"><a href=\"#方法-exec-：匹配和捕获组\" class=\"headerlink\" title=\"方法 exec()：匹配和捕获组\"></a>方法 exec()：匹配和捕获组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/a(b+)a/.exec(<span class=\"string\">&#x27;_abbba_aba_&#x27;</span>)    <span class=\"comment\">// [ &#x27;abbba&#x27;, &#x27;bbb&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p>返回的数组第一项（索引为0）是完整匹配，捕获的第一个分组在第二项（索引为1），等。有一种方法可以反复调用获取所有匹配。</p>\n<h3 id=\"方法-replace-：搜索并替换\"><a href=\"#方法-replace-：搜索并替换\" class=\"headerlink\" title=\"方法 replace()：搜索并替换\"></a>方法 replace()：搜索并替换</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&lt;a&gt; &lt;bbb&gt;&#x27;</span>.replace(<span class=\"regexp\">/&lt;(.*?)&gt;/g</span>, <span class=\"string\">&#x27;[$1]&#x27;</span>) <span class=\"comment\">// &#x27;[a] [bbb]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>replace</code>的第一个参数必须是正则表达式，并且开启全局搜索（<code>/g</code>标记），否则仅第一个匹配项会被替换。有一种方法使用一个函数来计算替换项。</p>\n<h2 id=\"十六、数学\"><a href=\"#十六、数学\" class=\"headerlink\" title=\"十六、数学\"></a>十六、数学</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a>是一个有算数功能的对象。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.abs(-<span class=\"number\">2</span>) <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">3</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 3^2 = 9</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">5</span>) <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.round(<span class=\"number\">1.9</span>) <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI)  <span class=\"comment\">// 预定义常量π，-1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十七、标准库的其他功能\"><a href=\"#十七、标准库的其他功能\" class=\"headerlink\" title=\"十七、标准库的其他功能\"></a>十七、标准库的其他功能</h2><p><code>JavaScript</code>标准库相对简单，但有很多其他东西你可以使用：</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a>：日期构造函数，主要功能有转换和创建日期字符串，访问日期组成部分（年，小时等）。<br><a href=\"http://www.2ality.com/2011/08/json-api.html\">JSON</a>：一个对象，功能是转换和生成<code>JSON</code>数据。<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\">console.*</a>方法：浏览器的具体方法，不是语言成分的部分，但他们也可以在<a href=\"https://nodejs.org/\">Node.js</a>中工作。</p>\n<h2 id=\"十八、下一步学什么？\"><a href=\"#十八、下一步学什么？\" class=\"headerlink\" title=\"十八、下一步学什么？\"></a>十八、下一步学什么？</h2><p>在你学会了这篇文章的基础教程后，你可以转到大部分章节末尾提到的高级教程。此外，我建议你看下面的资源：</p>\n<ul>\n<li>Style guides: I have written <a href=\"http://www.2ality.com/2013/07/meta-style-guide.html\">a guide to style guides</a></li>\n<li><a href=\"http://underscorejs.org/\">Underscore.js</a>: 一个弥补JavaScript标准库缺少的功能的库</li>\n<li><a href=\"http://jsbooks.revolunet.com/\">JSbooks – free JavaScript books</a></li>\n<li><a href=\"http://uptodate.frontendrescue.org/\">Frontend rescue: how to keep up to date on frontend technologies</a></li>\n<li><a href=\"http://yanhaijing.com/\">http://yanhaijing.com</a> 当然还有我的博客也非常不错哦</li>\n<li><a href=\"http://yanhaijing.com/es5\">http://yanhaijing.com/es5</a> 如果你想成为高手，我建议阅读<code>ecmascript</code>规范</li>\n<li><a href=\"http://yanhaijing.com/javascript/2013/12/11/24-JavaScript-best-practices-for-beginners\">给javascript初学者的24条最佳实践</a></li>\n<li><a href=\"http://yanhaijing.com/javascript/2014/04/23/seven-javascript-quirks-i-wish-id-known-about\">我希望我知道的七个JavaScript技巧</a></li>\n</ul>\n<p>参考自原文：<a href=\"http://www.2ality.com/2013/06/basic-javascript.html\">http://www.2ality.com/2013/06/basic-javascript.html</a><br>参考自译文：<a href=\"http://yanhaijing.com/basejs/\">http://yanhaijing.com/basejs/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、JavaScript介绍\"><a href=\"#一、JavaScript介绍\" class=\"headerlink\" title=\"一、JavaScript介绍\"></a>一、JavaScript介绍</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">JavaScript</a>是目前所有主流浏览器上唯一支持的脚本语言，这也是早期<code>JavaScript</code>的唯一用途。其主要作用是在不与服务器交互的情况下修改<code>HTML</code>页面内容，因此其最关键的部分是<code>DOM</code>（文档对象模型），也就是<code>HTML</code>元素的结构。通过<code>Ajax</code>可以使<code>HTML</code>页面通过<code>JavaScript</code>，在不重新加载页面的情况下从服务器上获取数据并显示，大幅提高用户体验。通过<code>JavaScript</code>，使<code>Web</code>页面发展成胖客户端成为可能。</p>\n<h3 id=\"语言的性质\"><a href=\"#语言的性质\" class=\"headerlink\" title=\"语言的性质\"></a>语言的性质</h3><p>本节对<code>JavaScript</code>的性质做简要介绍，以帮你理解一些疑问。</p>\n<p><code>JavaScript</code>和<code>ECMAScript</code>（JavaScript versus ECMAScript）<br>编程语言称为<code>JavaScript</code>，语言标准被称为<code>ECMAScript</code>。他们有不同名字的原因是因为“Java”已经被注册为商标（属于Oracle）。目前，只有<code>Mozilla</code>被正式允许使用“JavaScript”名称，因为很久以前他们得到一份许可。因此，开放的语言标准拥有不同的名字。当前的<code>JavaScript</code>版本是<code>ECMAScript 6</code>，<code>ECMAScript 7</code>当前是开发版。</p>\n<p><code>JavaScript</code>之父，<code>Brendan Eich</code><a href=\"http://yanhaijing.com/javascript/2013/06/22/javascript-designing-a-language-in-10-days/\">迅速了创建一门编程语言</a>。（否则，Netscape将使用其他技术）。他借鉴了几门其他语言的一些特性：</p>\n<ul>\n<li>JavaScript借鉴了Java的语法和如何区分原始值和对象。</li>\n<li>JavaScript的函数设计受Scheme和AWK的启发——他们（的函数）都是第一类（first-class）对象，并且在语言中广泛使用。闭包使他们（函数）变成强大的工具。</li>\n<li>Self影响了JavaScript独一无二的面向对象编程(OOP)风格。它的核心思想（在这里我们没有提到）非常优雅，基于此创建的语言非常少。但后面会提到一个简单的模式照顾大部分用例。JavaScript面向对象编程的杀手级特性是你可以直接创建对象。不需要先创建类或其他类似的东西。</li>\n<li>Perl和Python影响了JavaScript字符串，数组和正则表达式的操作。</li>\n</ul>\n<p><code>JavaScript</code>在最初的时候并不是一个完善的语言，因此也导致<code>JavaScript</code>遗留了很多令人诟病的问题。在开发稍大规模的应用时会显得力不从心，但是由于<code>JavaScript</code>本身是一种非常灵活的语言，因此在它的基础上开发程序库比较容易，因此出现了一大批非常优秀的第三方库，如<a href=\"http://jquery.com/\">jQuery</a>，<a href=\"http://extjs.org.cn/\">ExtJS</a>，<a href=\"http://underscorejs.org/\">underscorejs</a>，<a href=\"http://backbonejs.org/\">backbone</a>等等，由于这些第三方库，<code>JavaScript</code>变得非常简单。其中<code>jQuery</code>的使用非常广泛，它大幅简化了<code>DOM</code>和<code>Ajax</code>，已经成为了很多网站的标配。<code>jQuery</code>虽然基于<code>JavaScript</code>，但它提供了另外一种编程范式，也就是逻辑式编程，与<code>SQL</code>和正则表达式类似。</p>\n<h3 id=\"JavaScript能做什么\"><a href=\"#JavaScript能做什么\" class=\"headerlink\" title=\"JavaScript能做什么\"></a>JavaScript能做什么</h3><p><img src=\"https://statics.sh1a.qingstor.com/2020/11/29/js.png\" alt=\"JavaScript项目在Github所占比例\"></p>\n<p>如上图，<code>JavaScript</code>作为<a href=\"https://github.com/\">Github</a>上最流行、最火的编程语言，几乎无所不能。这里是<a href=\"https://segmentfault.com/u/puyart\">PuYart</a>的关于<a href=\"https://segmentfault.com/a/1190000003767058\"><code>JavaScript</code>就要统治世界了</a>的文章，可以让我们了解<code>JavaScript</code>到底能做什么的一些介绍。</p>\n<ol>\n<li>Web前端(各种前端工具类库、前端框架、动画效果、数据可视化等)</li>\n<li>服务端开发(<a href=\"https://nodejs.org/\">Node.js</a>)</li>\n<li>移动应用或者<code>Hybrid App</code>(Cordova)</li>\n<li>桌面应用(<a href=\"http://nwjs.io/\">NW.js</a>、<a href=\"http://electron.atom.io/\">Electron</a>)</li>\n<li>游戏(<a href=\"http://unity3d.com/cn/\">Unity3D</a>、<a href=\"http://www.cocos.com/doc/article/index?type=cocos2d-x&url=/doc/cocos-docs-master/manual/framework/cocos2d-js/catalog/../1-about-cocos2d-js/1-1-a-brief-history/zh.md\">Cocos2d-js</a>、<a href=\"http://pomelo.netease.com/\">Pomelo</a>)</li>\n<li>VR(<a href=\"https://www.phodal.com/blog/why-javascript-will-use-vr-world/\">JavaScript在VR世界的应用</a>)</li>\n<li>硬件、嵌入式物联网等(<a href=\"http://blog.jobbole.com/46055/\">Tessel：用JavaScript做嵌入式开发</a>)</li>\n<li>操作系统(<a href=\"http://node-os.com/\">NodeOS</a>)</li>\n</ol>\n<blockquote>\n<p>Atwood’s Law: any application that can be written in JavaScript, will eventually be written in JavaScript.(Atwood定律：凡是能用JavaScript写出来的，最终都会用JavaScript写出来。)</p>\n</blockquote>\n<h2 id=\"二、-JavaScript语法\"><a href=\"#二、-JavaScript语法\" class=\"headerlink\" title=\"二、 JavaScript语法\"></a>二、 JavaScript语法</h2><h3 id=\"语句和表达式\"><a href=\"#语句和表达式\" class=\"headerlink\" title=\"语句和表达式\"></a>语句和表达式</h3><p>了解<code>JavaScript</code>的语法，先来了解两个主要的语法类型：语句和表达式。</p>\n<ul>\n<li>语句通常是“做某些事情”。程序是一组语句的序列。举个例子，下面声明（创建）一个变量 <code>foo</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>表达式是产生“值”。他们通常位于赋值操作的右边、函数参数等。举个例子：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> * <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>语句和表达式之间的区别最好通过实例说明，<code>JavaScript</code>（像Java）有两种不同的方式实现<code>if-then-else</code>。一种是用语句：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (y &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    x = y;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    x = -y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一种是表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = y &gt;= <span class=\"number\">0</span> ? y : -y;</span><br></pre></td></tr></table></figure>\n\n<p>你可以将后者作为函数参数（但前者不行）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myFunction(y &gt;= <span class=\"number\">0</span> ? y : -y)</span><br></pre></td></tr></table></figure>\n\n<p>最后，每当<code>JavaScript</code>期待一个语句，你也可以用一个表达式代替。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(bar(<span class=\"number\">7</span>, <span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<p><code>foo(...);</code>是一个语句（也叫做表达式语句），<code>bar(7, 1)</code>则是一个表达式。他们都实现函数调用。</p>\n<h3 id=\"流程控制语句和语句块\"><a href=\"#流程控制语句和语句块\" class=\"headerlink\" title=\"流程控制语句和语句块\"></a>流程控制语句和语句块</h3><p>流程控制语句，其语句体可以是单条语句。举两个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj !== <span class=\"literal\">null</span>) obj.foo();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (x &gt; <span class=\"number\">0</span>) x--;</span><br></pre></td></tr></table></figure>\n\n<p>然而，任何语句总能被语句块代替，花括号包含零或多条语句。因此，你也可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    obj.foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    x--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为便于程序的阅读和维护，推荐使用后一种方式，即语句块方式。</p>\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><p><code>JavaScript</code>中的分号是<a href=\"http://www.2ality.com/2011/05/semicolon-insertion.html\">可选的</a>。但省略（分号）可能会带来意想不到的结果，所以我建议还是写上分号。</p>\n<p>正如上面所看到的，分号作为语句的结尾，但语句块不需要。仅有一种情况下你能看到语句块后面有分号——<strong>函数表达式后面的函数体块</strong>。<strong>表达式作为语句的结尾，后面是分号</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">3</span> * <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p><code>JavaScript</code>的注释有两种形式：单行注释和多行注释。单行注释以<code>//</code>开头，以换行符结尾：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x++; <span class=\"comment\">// 单行（single-line）注释</span></span><br></pre></td></tr></table></figure>\n\n<p>多行注释用<code>/**/</code>包裹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> 这是多行注释</span></span><br><span class=\"line\"><span class=\"comment\"> 多行哦</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、变量和赋值\"><a href=\"#三、变量和赋值\" class=\"headerlink\" title=\"三、变量和赋值\"></a>三、变量和赋值</h2><p><code>JavaScript</code>中的变量在使用前必须先声明，否则会报错引用错误（Reference Error）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;  <span class=\"comment\">// 声明变量“foo”</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><p>你可以在声明变量的同时为其赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以给已经存在的变量重新赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo = <span class=\"number\">4</span>;  <span class=\"comment\">// 更改变量的值</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"复合赋值操作符\"><a href=\"#复合赋值操作符\" class=\"headerlink\" title=\"复合赋值操作符\"></a>复合赋值操作符</h3><p>有很多复合赋值操作符，例如+=。下面的两个赋值操作等价：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x += <span class=\"number\">1</span>;</span><br><span class=\"line\">x = x + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"标识符和变量名\"><a href=\"#标识符和变量名\" class=\"headerlink\" title=\"标识符和变量名\"></a>标识符和变量名</h3><p>标识符就是事物的名字，在<code>JavaScript</code>中他们扮演不同的语法角色。例如，变量的名称是一个标识符。</p>\n<p>大体上，标识符的第一个字符可以是任何<code>Unicode</code>字符、美元标志符（$）或下划线（_）。后面可以是任意字符和数字。因此，下面全是合法的标识符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arg0</span><br><span class=\"line\">_tmp</span><br><span class=\"line\">$elem</span><br><span class=\"line\">π</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>：首字符不能是数字，如果是数字的话，该如何区分是数字还是变量呢？</p>\n</blockquote>\n<p>一些标识符是“保留关键字”——他们是语法的一部分，不能用作变量名。从技术上讲，下面三个标识符不是保留字，但也不应该作为变量名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">Infinity</span> <span class=\"literal\">NaN</span> <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、值\"><a href=\"#四、值\" class=\"headerlink\" title=\"四、值\"></a>四、值</h2><p><code>JavaScript</code>有所有我们期待的编程语言值类型：布尔，数字，字符串，数组等。<code>JavaScript</code>中的所有值都有属性。每个属性有一个键（或名字）和一个值。你可以使用点（.）操作符读取属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value.propKey</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：字符串<code>abc</code>有属性<code>lenght</code>（长度）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.length); <span class=\"comment\">// 得到3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码也可以写成下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.length <span class=\"comment\">// 得到3</span></span><br></pre></td></tr></table></figure>\n\n<p>点操作符也可以用来给属性赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;  <span class=\"comment\">// 空对象</span></span><br><span class=\"line\">obj.foo = <span class=\"number\">123</span>; <span class=\"comment\">// 创建属性“foo”，设置它为123</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.foo); <span class=\"comment\">// 得到123</span></span><br></pre></td></tr></table></figure>\n\n<p>你也可以通过它（.）调用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span>.toUpperCase(); <span class=\"comment\">// 得到HELLO</span></span><br></pre></td></tr></table></figure>\n\n<p>上面，我们在值<code>hello</code>上面调用方法<code>toUpperCase()</code>。</p>\n<h3 id=\"原始类型值和对象\"><a href=\"#原始类型值和对象\" class=\"headerlink\" title=\"原始类型值和对象\"></a>原始类型值和对象</h3><p>JavaScript定义了不同值之间的区别：</p>\n<ul>\n<li>原始值包括：<code>boolean</code>，<code>number</code>，<code>string</code>，<code>null</code>和<code>undefined</code>。</li>\n<li>所有其他的值都是对象。实际上对象被定义为——所有不为原始值的值。</li>\n</ul>\n<p>两者之间的主要区别在于他们是如何被比较的：每一个对象有一个独一无二的标志，并且仅和自己相等：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;  <span class=\"comment\">// 一个空对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;;  <span class=\"comment\">// 另一个空对象</span></span><br><span class=\"line\">obj1 === obj2   <span class=\"comment\">// false</span></span><br><span class=\"line\">obj1 === obj1   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>相反，所有原始值只要编码值相同就被认为是相同的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prim1 = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> prim2 = <span class=\"number\">123</span>;</span><br><span class=\"line\">prim1 === prim2 <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原始类型值\"><a href=\"#原始类型值\" class=\"headerlink\" title=\"原始类型值\"></a>原始类型值</h3><p>下面全是原始类型值（简称：原始值）：</p>\n<ul>\n<li><p>布尔类型：true，false</p>\n</li>\n<li><p>数字类型：1736，1.351</p>\n</li>\n<li><p>字符串类型: ‘abc’，”abc”</p>\n</li>\n<li><p>两个“无值（non-values）”：undefined，null<br>原始值的特征：</p>\n</li>\n<li><p><strong>值做比较时,“内容”做比较</strong>。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> === <span class=\"number\">3</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span> === <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>无法更改</strong>：值的属性无法更改，无法添加和移除属性，获取未知属性总返回undefined。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">str.foo = <span class=\"number\">3</span>; <span class=\"comment\">// try to create property `foo` ⇒ no effect</span></span><br><span class=\"line\">str.foo  <span class=\"comment\">// unknown property ⇒  undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><h4 id=\"对象的类型\"><a href=\"#对象的类型\" class=\"headerlink\" title=\"对象的类型\"></a>对象的类型</h4><p>所有非原始值的值都是对象。最常见的几种对象类型是：</p>\n<ul>\n<li>简单对象（类型是<code>Object</code>）能通过对象字面量创建：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    firstName: ‘Jane’,</span><br><span class=\"line\">    lastName: ‘Doe’</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的对象有两个属性：<code>firstName</code>属性的值是“Jane”，<code>lastName</code>属性的值是“Doe”。</p>\n<ul>\n<li>数组（类型是<code>Array</code>）能通过数组字面量创建：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ ‘apple’, ‘banana’, ‘cherry’ ]</span><br></pre></td></tr></table></figure>\n\n<p>上面的数组有三个元素，可以通过数字索引访问。例如“apple”的索引是0。</p>\n<ul>\n<li>正则表达式对象（类型是<code>RegExp</code>）能通过正则表达式字面量创建。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^a+b+$/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象的特征\"><a href=\"#对象的特征\" class=\"headerlink\" title=\"对象的特征\"></a>对象的特征</h4><ul>\n<li><strong>比较的是引用</strong>：比较的是标识符，每个值有自己的标识符。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125; === &#123;&#125;  <span class=\"comment\">// 两个不同的空对象, false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1;</span><br><span class=\"line\">obj1 === obj2   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>默认可以更改</strong>。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.foo = <span class=\"number\">123</span>;</span><br><span class=\"line\">obj.foo <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n\n<p>所有的数据结构（如数组）都是对象，但并不是所有的对象都是数据结构。例如：正则表达式是对象，但不是数据结构。</p>\n<h3 id=\"undefined-和-null\"><a href=\"#undefined-和-null\" class=\"headerlink\" title=\"undefined 和 null\"></a>undefined 和 null</h3><p><code>JavaScript</code>有两个“无值）”：<code>undefined</code>和<code>null</code>。</p>\n<p><code>undefined</code>的意思是“没有值”。未初始化的变量是<code>undefined</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>读取不存在的属性时，将返回<code>undefined</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">var</span> obj = &#123;&#125;; <span class=\"comment\">// 空对象</span></span><br><span class=\"line\">&gt; obj.foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>缺省的参数也是<code>undefined</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><code>null</code>的意思是“没有对象”。它被用来表示对象的无值（参数，链上的对象等）。</p>\n<p>通常情况下你应该把<code>undefined</code>和<code>null</code>看成是等价的，如果他们代表相同意义的无值的话。检查他们的一种方式是通过严格比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x === <span class=\"literal\">undefined</span> || x === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一种在实际中使用的方法是认为undefined 和 null 都是false：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!x) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>警告</strong>：false，0，NaN 和 “” 都被当作false。</p>\n</blockquote>\n<h3 id=\"包装类型\"><a href=\"#包装类型\" class=\"headerlink\" title=\"包装类型\"></a>包装类型</h3><p>对象类型的实例<code>Foo</code>（包括内建类型，例如Array和其他自定义类型）从对象<code>Foo.prototype</code>上获取方法。你可以通过读取这个方法的方式（不是调用）验证这点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[].push === <span class=\"built_in\">Array</span>.prototype.push  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>相反，<strong>原始类型是没有类型的，所以每个原始类型有一个关联类型，称之为包装类型</strong>：</p>\n<ul>\n<li>布尔值的包装类型是 Boolean。布尔值从Boolean.prototype上获取方法：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"literal\">true</span>.toString === <span class=\"built_in\">Boolean</span>.prototype.toString    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：包装类型名字的首字母是大写的B。如果在JavaScript中布尔值的类型可以访问，那么它可能会被转换为布尔对象。</p>\n</blockquote>\n<ul>\n<li>数字值的包装类型是<code>Number</code>。</li>\n<li>字符串值的包装类型是<code>String</code>。</li>\n</ul>\n<p>包装类型也有实例（他们的实例是对象），但不常用。相反，包装类型有其他用处：<strong>如果你将他们作为函数调用，他们可以将值转换为原始类型</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;123&#x27;</span>) <span class=\"comment\">//123</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">true</span>)  <span class=\"comment\">//&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过typeof和instanceof将值分类\"><a href=\"#通过typeof和instanceof将值分类\" class=\"headerlink\" title=\"通过typeof和instanceof将值分类\"></a>通过typeof和instanceof将值分类</h3><p>有两个操作符可以用来将值分类：<code>typeof</code>主要用于原始值，<code>instanceof</code>主要用于对象。</p>\n<h4 id=\"typeof-使用方法如下：\"><a href=\"#typeof-使用方法如下：\" class=\"headerlink\" title=\"typeof 使用方法如下：\"></a>typeof 使用方法如下：</h4><p><code>typeof «value»</code></p>\n<p><code>typeof</code>返回描述<code>value</code>“类型”的一个字符串。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> <span class=\"comment\">//&#x27;boolean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"comment\">//&#x27;string&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// 空对象字面量,&#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// 空数组字面量,&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面列出了<code>typeof</code>操作的所有结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作数 结果</span><br><span class=\"line\">undefined\t&#39;undefined&#39;</span><br><span class=\"line\">null\t&#39;object&#39;</span><br><span class=\"line\">Boolean value\t&#39;boolean&#39;</span><br><span class=\"line\">Number value\t&#39;number&#39;</span><br><span class=\"line\">String value\t&#39;string&#39;</span><br><span class=\"line\">Function\t&#39;function&#39;</span><br><span class=\"line\">All other values\t&#39;object&#39;</span><br></pre></td></tr></table></figure>\n\n<p>有两个结果和我们上面说的的原始值与对象是矛盾的：</p>\n<ul>\n<li>函数的类型是<code>function</code>而不是<code>object</code>。因为函数（类型为“function”）是对象（类型是对象）的子类型，这不是一个错误。</li>\n<li><code>null</code>的类型是<code>object</code>。这是一个bug，但从没被修复，因为修复后会破坏现有的代码。</li>\n</ul>\n<h4 id=\"instanceof使用方法如下：\"><a href=\"#instanceof使用方法如下：\" class=\"headerlink\" title=\"instanceof使用方法如下：\"></a>instanceof使用方法如下：</h4><p><code>«value» instanceof «Constr»</code></p>\n<p>如果<code>value</code>是一个对象，并且<code>value</code> 是由构造函数<code>Constr</code>创建的（参考：类）。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> Bar();  <span class=\"comment\">// 通过构造函数Bar创建对象</span></span><br><span class=\"line\">b <span class=\"keyword\">instanceof</span> Bar    <span class=\"comment\">//true</span></span><br><span class=\"line\">&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>    <span class=\"comment\">//true</span></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深入阅读\"><a href=\"#深入阅读\" class=\"headerlink\" title=\"深入阅读\"></a>深入阅读</h3><ul>\n<li><a href=\"http://yanhaijing.com/javascript/2014/01/05/exploring-the-abyss-of-null-and-undefined-in-javascript/\">探索JavaScript中Null和Undefined的深渊</a></li>\n</ul>\n<h2 id=\"五、布尔\"><a href=\"#五、布尔\" class=\"headerlink\" title=\"五、布尔\"></a>五、布尔</h2><p>布尔类型原始值包括<code>true</code>和<code>false</code>。下面的操作符会得到布尔值：</p>\n<ul>\n<li>二元逻辑运算符：&amp;&amp;（与），||（或）</li>\n<li>前缀逻辑运算符：!（非）</li>\n<li>等值运算符：=== !== == !=</li>\n<li>比较运算符（字符串或数字）：&gt; &gt;= &lt; &lt;=</li>\n</ul>\n<h3 id=\"真值和假值\"><a href=\"#真值和假值\" class=\"headerlink\" title=\"真值和假值\"></a>真值和假值</h3><p>每当<code>JavaScript</code>希望一个布尔值时（例如：if语句的条件），可以使用任何值。它将被理解（转换）为<code>true</code>或<code>false</code>。下面的值被理解为<code>false</code>：</p>\n<ul>\n<li>undefined, null</li>\n<li>布尔: false</li>\n<li>数字: 0, NaN</li>\n<li>字符串: ‘’</li>\n</ul>\n<p>所有其他值被认为<code>true</code>。被理解为<code>false</code>的值称为假值，被理解为<code>true</code>的值称为真值。可以使用<code>Boolean</code>作为函数，测试值被理解为什么。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">undefined</span>)  <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"number\">0</span>)    <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"number\">3</span>)    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二元逻辑运算符\"><a href=\"#二元逻辑运算符\" class=\"headerlink\" title=\"二元逻辑运算符\"></a>二元逻辑运算符</h3><p><code>JavaScript</code>中的<strong>二元逻辑运算符是短路运算</strong>——如果第一个操作数可以确定结果，第二个操作数将不被验证（运算）。例如，在下面的代码中，函数<code>foo()</code>永远不会被调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> &amp;&amp; foo()</span><br><span class=\"line\"><span class=\"literal\">true</span> || foo()</span><br></pre></td></tr></table></figure>\n\n<p>此外，<strong>二元逻辑运算符会返回操作数中的一个</strong>，可能是一个布尔值，也可能不是。</p>\n<ul>\n<li><strong>与</strong>：如果第一个操作数是假值，返回第一个。否则返回第二个操作数。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> &amp;&amp; <span class=\"string\">&#x27;abc&#x27;</span>    <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"number\">123</span> &amp;&amp; <span class=\"string\">&#x27;abc&#x27;</span>    <span class=\"comment\">//&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>或</strong>：如果第一个操作数是真值，返回第一个。否则，返回第二个操作数。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span> || <span class=\"number\">123</span>    <span class=\"comment\">//&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span> || <span class=\"number\">123</span>   <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等值运算符\"><a href=\"#等值运算符\" class=\"headerlink\" title=\"等值运算符\"></a>等值运算符</h3><p>在<code>JavaScript</code>中检测相等，你可以使用严格相等（<code>===</code>）和严格不等（<code>!==</code>）。或者你也可以使用非严格相等（<code>==</code>）和非严格不等（<code>!=</code>）。</p>\n<blockquote>\n<p><strong>经验规则：总是用严格运算符，假装非严格运算符不存在。严格相等更安全。</strong></p>\n</blockquote>\n<h3 id=\"深入阅读-1\"><a href=\"#深入阅读-1\" class=\"headerlink\" title=\"深入阅读\"></a>深入阅读</h3><ul>\n<li><a href=\"http://yanhaijing.com/javascript/2014/04/25/strict-equality-exemptions/\">在JavaScript中什么时候使用==是正确的？</a></li>\n</ul>\n<h2 id=\"六、数字\"><a href=\"#六、数字\" class=\"headerlink\" title=\"六、数字\"></a>六、数字</h2><p><code>JavaScript</code>中的<strong>所有数字都是浮点型</strong>（虽然大部分的JavaScript引擎内部也使用整数）。至于为什么这样设计，查看这里（<a href=\"http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points\">每一个JavaScript开发者应该了解的浮点知识</a>）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> === <span class=\"number\">1.0</span>   <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>特殊数字：</p>\n<ul>\n<li><code>NaN</code> (“不是一个数字 not a number”): 错误值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;xyz&#x27;</span>)  <span class=\"comment\">// &#x27;xyz&#x27; 不能被转换为数字得到:NaN</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Infinity</code>：也是最大错误值（无穷大）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> / <span class=\"number\">0</span>   <span class=\"comment\">//Infinity</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">1024</span>)  <span class=\"comment\">// 数字太大了,得到Infinity</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Infinity</code>有时很有用，因为它比任何其他数字都大。同样，<code>-Infinity</code> 比其他任何数字都小。</p>\n<ul>\n<li><code>JavaScript</code>有两个零，<code>+0</code>和<code>-0</code>。它（js引擎）通常不让你看到，并简单将两个零都显示为0：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span>  <span class=\"comment\">//0</span></span><br><span class=\"line\">-<span class=\"number\">0</span>  <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<p>因此最好假装只有一个零（正如我们看到假值时所做的那样：**-0 和 +0 都是假值**）。</p>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p><code>JavaScript</code>中有下列算数运算符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加: number1 + number2</span><br><span class=\"line\">减: number1 - number2</span><br><span class=\"line\">乘: number1 * number2</span><br><span class=\"line\">除: number1 / number2</span><br><span class=\"line\">模: number1 % number2</span><br><span class=\"line\">自增: ++variable, variable++</span><br><span class=\"line\">自减: –variable, variable–</span><br><span class=\"line\">负值: -value</span><br><span class=\"line\">正值（转换为数字）: +value</span><br></pre></td></tr></table></figure>\n\n<p>全局对象<code>Math</code>通过函数提供更多算数运算操作。</p>\n<p><code>JavaScript</code>中也有位运算符（例如：&amp;）。</p>\n<h2 id=\"七、字符串\"><a href=\"#七、字符串\" class=\"headerlink\" title=\"七、字符串\"></a>七、字符串</h2><p>字符串可以直接通过字符串字面量创建。这些字面量被单引号或双引号包裹。反斜线（\\）转义字符并且产生一些控制字符。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;Did she say &quot;Hello&quot;?&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;Did she say \\&quot;Hello\\&quot;?&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;That\\&#x27;s nice!&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;That&#x27;s nice!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;Line 1\\nLine 2&#x27;</span>  <span class=\"comment\">// 换行</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Backlash: \\\\&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以通过方括号访问单个字符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">str[<span class=\"number\">1</span>]    <span class=\"comment\">//&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>length</code>属性是字符串的字符数量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.length  <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>提醒</strong>：字符串是不可变的，如果你想改变现有字符串，你需要创建一个新的字符串。</p>\n</blockquote>\n<h3 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h3><p>字符串可以通过加号操作符（+）拼接，如果其中一个操作数为字符串，会将另一个操作数也转换为字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> msgCount = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"string\">&#x27;You have &#x27;</span>+ msgCount + <span class=\"string\">&#x27; messages&#x27;</span> <span class=\"comment\">//&#x27;You have 3 messages&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>连续执行拼接操作可以使用<code>+=</code>操作符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">str += <span class=\"string\">&#x27;Multiple &#x27;</span>;</span><br><span class=\"line\">str += <span class=\"string\">&#x27;pieces &#x27;</span>;</span><br><span class=\"line\">str += <span class=\"string\">&#x27;are concatenated.&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">//&#x27;Multiple pieces are concatenated.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3><p>字符串有许多有用的方法。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.slice(<span class=\"number\">1</span>)  <span class=\"comment\">// 复制子字符串,得到索引1及其之后的字符串，即：&#x27;bc&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.slice(<span class=\"number\">1</span>, <span class=\"number\">2</span>)   <span class=\"comment\">//得到索引1和2之间的字符串，即：&#x27;b&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;\\t xyz  &#x27;</span>.trim()  <span class=\"comment\">// 移除空白字符，即：&#x27;xyz&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;mjölnir&#x27;</span>.toUpperCase()   <span class=\"comment\">//转成大写，即：&#x27;MJÖLNIR&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.indexOf(<span class=\"string\">&#x27;b&#x27;</span>)  <span class=\"comment\">// 查找第一个b的索引，即：1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;abc&#x27;</span>.indexOf(<span class=\"string\">&#x27;x&#x27;</span>)    <span class=\"comment\">//没有返回-1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、语句\"><a href=\"#八、语句\" class=\"headerlink\" title=\"八、语句\"></a>八、语句</h2><h3 id=\"条件（Conditionals）\"><a href=\"#条件（Conditionals）\" class=\"headerlink\" title=\"条件（Conditionals）\"></a>条件（Conditionals）</h3><p><code>if</code>语句通过布尔条件决定执行那个分支：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (myvar === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (myvar === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// else</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (myvar === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (myvar === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// else-if</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (myvar === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// else-if</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// else</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的<code>switch</code>语句，furit的值决定那个分支被执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (fruit) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;banana&#x27;</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;apple&#x27;</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:  <span class=\"comment\">// 所有其他情况</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"循环（Loops）\"><a href=\"#循环（Loops）\" class=\"headerlink\" title=\"循环（Loops）\"></a>循环（Loops）</h3><p>for 循环的格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(初始化; 当条件成立时循环; 下一步操作)</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当条件成立时<code>while</code>循环继续循环它的循环体。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和上面的for循环相等</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; arr.length) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当条件成立时，<code>do-while</code>循环继续循环。由于条件位于循环体之后，所以循环体总是被至少至少执行一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span>(条件);</span><br></pre></td></tr></table></figure>\n\n<p>在所有的循环中：</p>\n<ul>\n<li>break中断循环</li>\n<li>continue开始一个新的循环迭代</li>\n</ul>\n<h2 id=\"九、函数\"><a href=\"#九、函数\" class=\"headerlink\" title=\"九、函数\"></a>九、函数</h2><p>定义函数的一种方法是通过函数声明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">param1, param2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> param1 + param2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码定义一个名称叫做<code>add</code>的函数，有两个参数<code>param1</code>和<code>param2</code>，并且返回参数的和。下面是如何调用这个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">6</span>, <span class=\"number\">1</span>)   <span class=\"comment\">//7</span></span><br><span class=\"line\">add(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>)   <span class=\"comment\">//&#x27;ab&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>另一种定义<code>add()</code>函数的方法是通过函数表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">param1, param2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> param1 + param2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>函数表达式产生一个值，因此可以直接将函数作为参数传递给其他函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">someOtherFunction(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1, p2</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数声明提升\"><a href=\"#函数声明提升\" class=\"headerlink\" title=\"函数声明提升\"></a>函数声明提升</h3><p>函数声明会被提升，他们全被移动到当前作用域开始之处。这允许你在函数声明之前调用它们：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    bar();  <span class=\"comment\">// 没问题，bar被提升</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>：虽然变量声明也会被提升，但赋值的过程不会被提升：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    bar();  <span class=\"comment\">// 有问题，bar是undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特殊变量参数\"><a href=\"#特殊变量参数\" class=\"headerlink\" title=\"特殊变量参数\"></a>特殊变量参数</h3><p><strong>在<code>JavaScript</code>中你可以调用任意函数并传递任意数量的参数</strong>——语言绝不会“抱怨”（参数检测）。都可以正常工作，然而，使所有参数可访问需要通过特殊变量<code>arguments</code>。<code>arguments</code>看起来像数组，但它没有数组的方法（称为类数组 array-like）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = f(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">args.length <span class=\"comment\">//3</span></span><br><span class=\"line\">args[<span class=\"number\">0</span>]  <span class=\"comment\">// 获取索引为0的元素,&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"太多或太少参数\"><a href=\"#太多或太少参数\" class=\"headerlink\" title=\"太多或太少参数\"></a>太多或太少参数</h3><p>让我们通过下面的函数探索<code>JavaScript</code>中传递太多或太少参数时如何处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多出的参数将被忽略（可以通过<code>arguments</code>访问）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>)    <span class=\"comment\">//a b</span></span><br></pre></td></tr></table></figure>\n\n<p>缺少的参数将会是<code>undefined</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(<span class=\"string\">&#x27;a&#x27;</span>)    <span class=\"comment\">//a undefined</span></span><br><span class=\"line\">f() <span class=\"comment\">//undefined undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><p>下面是一个常见模式，给参数设置默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pair</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    x = x || <span class=\"number\">0</span>;  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">    y = y || <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [ x, y ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>（*）</code>这行，如果x是真值（除了：<code>null</code>，<code>undefined</code> 等），         操作符返回x。否则，它返回第二个操作数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pair()  <span class=\"comment\">//[ 0, 0 ]</span></span><br><span class=\"line\">pair(<span class=\"number\">3</span>) <span class=\"comment\">//[ 3, 0 ]</span></span><br><span class=\"line\">pair(<span class=\"number\">3</span>, <span class=\"number\">5</span>)  <span class=\"comment\">//[ 3, 5 ]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"强制数量\"><a href=\"#强制数量\" class=\"headerlink\" title=\"强制数量\"></a>强制数量</h3><p>如果你想强制参数的数量，你可以检测<code>arguments.length</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pair</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length !== <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Need exactly 2 arguments&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将arguments-转换为数组\"><a href=\"#将arguments-转换为数组\" class=\"headerlink\" title=\"将arguments 转换为数组\"></a>将arguments 转换为数组</h3><p><code>arguments</code>不是一个数组，它仅仅是类数组（array-like）：它有一个<code>length</code>属性，并且你可以通过方括号索引方式访问它的元素。然而，你不能移除元素，或在它上面调用任何数组方法。因此，有时你需要将其转换为数组。这就是下面函数的作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toArray</span>(<span class=\"params\">arrayLikeObject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [].slice.call(arrayLikeObject);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十、异常处理\"><a href=\"#十、异常处理\" class=\"headerlink\" title=\"十、异常处理\"></a>十、异常处理</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">异常处理</a>最常见的方式像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throwException</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Problem!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    throwException();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);  <span class=\"comment\">// 错误：信息</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.stack);  <span class=\"comment\">// 非标准，但大部分浏览器支持</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>try分支包裹易出错的代码，如果try分支内部抛出异常，catch分支将会执行。</p>\n<h2 id=\"十一、严格模式\"><a href=\"#十一、严格模式\" class=\"headerlink\" title=\"十一、严格模式\"></a>十一、严格模式</h2><p>严格模式开启检测和一些其他措施，使<code>JavaScript</code>变成更整洁的语言。推荐使用严格模式。为了开启严格模式，只需在<code>JavaScript</code>文件或<code>script</code>标签第一行添加如下语句：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以在每个函数上选择性开启严格模式，只需将上面的代码放在函数的开头：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionInStrictMode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的两小节看下严格模式的三大好处。</p>\n<h3 id=\"明确错误\"><a href=\"#明确错误\" class=\"headerlink\" title=\"明确错误\"></a>明确错误</h3><p>让我们看一个例子，严格模式给我们明确的错误，否则<code>JavaScript</code>总是静默失败：下面的函数<code>f()</code> 执行一些非法操作，它试图更改所有字符串都有的只读属性——<code>length</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;abc&#x27;</span>.length = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当你调用上面的函数，它静默失败，赋值操作被简单忽略。让我们将<code>f()</code>在严格模式下运行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f_strict</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"string\">&#x27;abc&#x27;</span>.length = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在浏览器报给我们一些错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f_strict()  <span class=\"comment\">// TypeError: Cannot assign to read only property &#x27;length&#x27; of abc</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不是方法的函数中的this\"><a href=\"#不是方法的函数中的this\" class=\"headerlink\" title=\"不是方法的函数中的this\"></a>不是方法的函数中的this</h3><p>在严格模式下，不作为方法的函数中的<code>this</code>值是<code>undefined</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f_strict</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f_strict() === <span class=\"literal\">undefined</span>);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>在非严格模式下，<code>this</code>的值是被称作全局对象（<code>global object</code>）（在浏览器里是<code>window</code>）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f() === <span class=\"built_in\">window</span>);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不再自动创建全局变量\"><a href=\"#不再自动创建全局变量\" class=\"headerlink\" title=\"不再自动创建全局变量\"></a>不再自动创建全局变量</h3><p>在非严格模式下，如果你给不存在的变量赋值，<code>JavaScript</code>会自动创建一个全局变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123; foo = <span class=\"number\">5</span> &#125;</span><br><span class=\"line\">f()  <span class=\"comment\">// 不会报错</span></span><br><span class=\"line\">foo <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<p>在严格模式下，这会产生一个错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f_strict</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"string\">&#x27;use strict&#x27;</span>; foo2 = <span class=\"number\">4</span>; &#125;</span><br><span class=\"line\">f_strict()  <span class=\"comment\">// ReferenceError: foo2 is not defined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深入阅读-2\"><a href=\"#深入阅读-2\" class=\"headerlink\" title=\"深入阅读\"></a>深入阅读</h3><ul>\n<li><a href=\"http://yanhaijing.com/javascript/2013/12/28/demystifying-this-in-javascript\">揭秘javascript中谜一样的this</a></li>\n<li><a href=\"http://yanhaijing.com/javascript/2014/04/30/javascript-this-keyword\">JavaScript中的this关键字</a></li>\n</ul>\n<h2 id=\"十二、变量作用域和闭包\"><a href=\"#十二、变量作用域和闭包\" class=\"headerlink\" title=\"十二、变量作用域和闭包\"></a>十二、变量作用域和闭包</h2><p>在<code>JavaScript</code>中，你必须使用变量之前，通过<code>var</code>声明变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\">x = <span class=\"number\">3</span>;</span><br><span class=\"line\">y = <span class=\"number\">4</span>;  <span class=\"comment\">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以用一条<code>var</code>语句声明和初始化多个变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">2</span>, z = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但我建议每个变量使用一条语句。因此，我将上面的语句重写为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> z = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>由于提升（见下文），最好在函数顶部声明变量。</p>\n<h3 id=\"变量和函数作用域\"><a href=\"#变量和函数作用域\" class=\"headerlink\" title=\"变量和函数作用域\"></a>变量和函数作用域</h3><p>变量的作用域总是整个函数（没有块级作用域）。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = -<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = -x;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);  <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到tmp变量不仅在（*）所在行的语句块存在，它在整个函数内都存在。</p>\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>变量声明会被提升：声明会被移到函数的顶部，但赋值过程不会。举个例子，在下面的函数中<code>（*）</code>行位置声明了一个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = <span class=\"number\">3</span>;  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在内部，上面的函数被执行像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp;  <span class=\"comment\">// declaration is hoisted</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        tmp = <span class=\"number\">3</span>;  <span class=\"comment\">// assignment stays put</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>每个函数保持和函数体内部变量的连接，甚至离开创建它的作用域之后。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIncrementor</span>(<span class=\"params\">start</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> start++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>（*）</code>行开始的函数在它创建时保留上下文，并在内部保存一个<code>start</code>活动值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inc = createIncrementor(<span class=\"number\">5</span>);</span><br><span class=\"line\">inc()   <span class=\"comment\">// 5</span></span><br><span class=\"line\">inc() <span class=\"comment\">// 6</span></span><br><span class=\"line\">inc()   <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n\n<p>闭包是一个函数加上和其作用域链的链接。因此，<code>createIncrementor()</code>返回的是一个闭包。</p>\n<h3 id=\"IIFE：模拟块级作用域\"><a href=\"#IIFE：模拟块级作用域\" class=\"headerlink\" title=\"IIFE：模拟块级作用域\"></a>IIFE：模拟块级作用域</h3><p>有时你想模拟一个块，例如你想将变量从全局作用域隔离。完成这个工作的模式叫做 <code>IIFE</code>(立即执行函数表达式(<code>Immediately Invoked Function Expression</code>))：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 块开始</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = ...;  <span class=\"comment\">// 非全局变量</span></span><br><span class=\"line\">&#125;());  <span class=\"comment\">// 块结束</span></span><br></pre></td></tr></table></figure>\n\n<p>上面你会看到函数表达式被立即执行。外面的括号用来阻止它被解析成函数声明；只有函数表达式能被立即调用。函数体产生一个新的作用域并使<code>tmp</code>变为局部变量。</p>\n<h3 id=\"闭包实现变量共享\"><a href=\"#闭包实现变量共享\" class=\"headerlink\" title=\"闭包实现变量共享\"></a>闭包实现变量共享</h3><p>下面是个经典问题，如果你不知道，会让你费尽思量。因此，先浏览下，对问题有个大概的了解。</p>\n<p>闭包保持和外部变量的连接，有时可能和你想像的行为不一致：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    result.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> i &#125;);  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result[<span class=\"number\">1</span>]()); <span class=\"comment\">// 5 (不是 1)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result[<span class=\"number\">3</span>]()); <span class=\"comment\">// 5 (不是 3)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>(*)</code>行的返回值总是当前的i值，而不是当函数被创建时的i值。当循环结束后，i的值是5，这是为什么数组中的所有函数的返回值总是一样的。如果你想捕获当前变量的快照，你可以使用<code>IIFE</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i2</span>) </span>&#123;</span><br><span class=\"line\">        result.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> i2 &#125;);</span><br><span class=\"line\">    &#125;(i));  <span class=\"comment\">// 复制当前的i</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>深入阅读</p>\n<ul>\n<li><a href=\"http://yanhaijing.com/javascript/2013/08/30/understanding-scope-and-context-in-javascript\">认识javascript中的作用域和上下文</a></li>\n<li><a href=\"http://yanhaijing.com/javascript/2014/04/30/JavaScript-Scoping-and-Hoisting\">JavaScript的作用域和提升机制</a></li>\n<li><a href=\"http://yanhaijing.com/javascript/2014/04/29/what-is-the-execution-context-in-javascript\">了解JavaScript的执行上下文</a></li>\n</ul>\n<h2 id=\"十三、对象和继承\"><a href=\"#十三、对象和继承\" class=\"headerlink\" title=\"十三、对象和继承\"></a>十三、对象和继承</h2><p>和所有的值类型一样，对象有属性。事实上，你可以将对象当作一组属性的集合，每个属性都是一对（键和值）。键是字符串，值可以是任意<code>JavaScript</code>值。到目前为止，我们仅仅见过键是标识符的属性，因为点操作符处理的键必须为标识符。在这节，你讲见到另一种访问属性的方法，能将任意字符串作为键。</p>\n<h3 id=\"单个对象\"><a href=\"#单个对象\" class=\"headerlink\" title=\"单个对象\"></a>单个对象</h3><p>在<code>JavaScript</code>中，你可以直接创建对象，通过对象字面量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jane = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Jane&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    describe: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">        &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Person named &#x27;</span>+<span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面的对象有两个属性：<code>name</code>和<code>describe</code>。你能读（“get”）和 写（“set”）属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jane.name  <span class=\"comment\">// get，&#x27;Jane&#x27;</span></span><br><span class=\"line\">jane.name = <span class=\"string\">&#x27;John&#x27;</span>;  <span class=\"comment\">// set</span></span><br><span class=\"line\">jane.newProperty = <span class=\"string\">&#x27;abc&#x27;</span>;  <span class=\"comment\">// 自动创建</span></span><br></pre></td></tr></table></figure>\n\n<p>属性是函数如<code>describe</code>可以被当作方法调用。当调用他们时可以在它们内部通过this引用对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jane.describe()  <span class=\"comment\">// 调用方法,&#x27;Person named John&#x27;</span></span><br><span class=\"line\">jane.name = <span class=\"string\">&#x27;Jane&#x27;</span>;</span><br><span class=\"line\">jane.describe() <span class=\"comment\">// &#x27;Person named Jane&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>in</code>操作符用来检测一个属性是否存在：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;newProperty&#x27;</span> <span class=\"keyword\">in</span> jane   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;foo&#x27;</span> <span class=\"keyword\">in</span> jane   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>若读取一个不存在的属性，将会得到<code>undefined</code>值。因此上面的两个检查也可以像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jane.newProperty !== <span class=\"literal\">undefined</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\">jane.foo !== <span class=\"literal\">undefined</span>  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p><code>delete</code>操作符用来删除一个属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> jane.newProperty <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;newProperty&#x27;</span> <span class=\"keyword\">in</span> jane   <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"任意键属性\"><a href=\"#任意键属性\" class=\"headerlink\" title=\"任意键属性\"></a>任意键属性</h3><p>属性的键可以是任意字符串。到目前为止，我们看到的对象字面量中的和点操作符后的属性关键字。按这种方法你只能使用标识符。如果你想用其他任意字符串作为键名，你必须在对象字面量里加上引号，并使用方括号获取和设置属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"string\">&#x27;not an identifier&#x27;</span>: <span class=\"number\">123</span> &#125;;</span><br><span class=\"line\">obj[<span class=\"string\">&#x27;not an identifier&#x27;</span>]    <span class=\"comment\">//123</span></span><br><span class=\"line\">obj[<span class=\"string\">&#x27;not an identifier&#x27;</span>] = <span class=\"number\">456</span>;</span><br></pre></td></tr></table></figure>\n\n<p>方括号允许你动态计算属性关键字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">&#x27;name&#x27;</span>;</span><br><span class=\"line\">jane[x]; <span class=\"comment\">// &#x27;Jane&#x27;</span></span><br><span class=\"line\">jane[<span class=\"string\">&#x27;na&#x27;</span>+<span class=\"string\">&#x27;me&#x27;</span>]; <span class=\"comment\">// &#x27;Jane&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用方法\"><a href=\"#引用方法\" class=\"headerlink\" title=\"引用方法\"></a>引用方法</h3><p>如果你引用一个方法，它将失去和对象的连接。就其本身而言，函数不是方法，其中的<code>this</code>值为<code>undefined</code>（严格模式下）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = jane.describe;</span><br><span class=\"line\">func()  <span class=\"comment\">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>解决办法是使用函数内置的<code>bind()</code>方法。它创建一个新函数，其<code>this</code>值固定为给定的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func2 = jane.describe.bind(jane);</span><br><span class=\"line\">func2() <span class=\"comment\">// &#x27;Person named Jane&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法内部的函数\"><a href=\"#方法内部的函数\" class=\"headerlink\" title=\"方法内部的函数\"></a>方法内部的函数</h3><p>每个函数都有一个特殊变量<code>this</code>。如果你在方法内部嵌入函数是很不方便的，因为你不能从函数中访问方法的<code>this</code>。下面是一个例子，我们调用<code>forEach</code>循环一个数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jane = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Jane&#x27;</span>,</span><br><span class=\"line\">    friends: [ <span class=\"string\">&#x27;Tarzan&#x27;</span>, <span class=\"string\">&#x27;Cheeta&#x27;</span> ],</span><br><span class=\"line\">    logHiToFriends: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">        &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">friend</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里的“this”是undefined</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name + <span class=\"string\">&#x27; says hi to &#x27;</span> + friend);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用<code>logHiToFriends</code>会产生错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jane.logHiToFriends()   <span class=\"comment\">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>有两种方法修复这问题。</p>\n<ul>\n<li>将<code>this</code>存储在不同的变量。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logHiToFriends: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">friend</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(that.name + <span class=\"string\">&#x27; says hi to &#x27;</span> + friend);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>forEach的第二个参数允许提供<code>this</code>值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logHiToFriends: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    &#x27;use strict&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">friend</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name + <span class=\"string\">&#x27; says hi to &#x27;</span> + friend);</span><br><span class=\"line\">    &#125;, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>JavaScript</code>中函数表达式经常被用作函数参数。时刻小心函数表达式中的<code>this</code>。</p>\n<h3 id=\"构造函数：对象工厂\"><a href=\"#构造函数：对象工厂\" class=\"headerlink\" title=\"构造函数：对象工厂\"></a>构造函数：对象工厂</h3><p>除了作为“真正”的函数和方法，函数还在JavaScript中扮演第三种角色：<strong>如果通过new操作符调用，他们会变为构造函数，对象的工厂</strong>。构造函数是对其他语言中的类的粗略模拟。约定俗成，构造函数的第一个字母大写。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置实例数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方法</span></span><br><span class=\"line\">Point.prototype.dist = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(<span class=\"built_in\">this</span>.x*<span class=\"built_in\">this</span>.x + <span class=\"built_in\">this</span>.y*<span class=\"built_in\">this</span>.y);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们看到构造函数分为两部分：首先，<code>Point</code>函数设置实例数据。其次，<code>Point.prototype</code>属性包含对象的方法。前者的数据是每个实例私有的，后面的数据是所有实例共享的。</p>\n<p>我们通过new操作符调用<code>Point</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">p.x <span class=\"comment\">//3</span></span><br><span class=\"line\">p.dist();    <span class=\"comment\">//5.830951894845301</span></span><br></pre></td></tr></table></figure>\n\n<p>p是<code>Point</code>的一个实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"keyword\">instanceof</span> Point  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> p    <span class=\"comment\">//&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深入阅读-3\"><a href=\"#深入阅读-3\" class=\"headerlink\" title=\"深入阅读\"></a>深入阅读</h3><ul>\n<li><a href=\"http://yanhaijing.com/javascript/2013/08/23/javascript-inheritance-how-to-shoot-yourself-in-the-foot-with-prototypes\">Javascript继承 原型的陷阱</a></li>\n<li><a href=\"http://yanhaijing.com/javascript/2013/08/30/encapsulation-of-javascript\">Javascript 封装问题</a></li>\n</ul>\n<h2 id=\"十四、数组\"><a href=\"#十四、数组\" class=\"headerlink\" title=\"十四、数组\"></a>十四、数组</h2><p>数组是数组元素的序列，能通过整数索引方法数组元素，数组索引从0开始。</p>\n<h3 id=\"数组字面量\"><a href=\"#数组字面量\" class=\"headerlink\" title=\"数组字面量\"></a>数组字面量</h3><p>数组字面量创建数组很方便：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">var</span> arr = [ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span> ];</span><br></pre></td></tr></table></figure>\n\n<p>上面的数组有三个元素：分别是字符串“a”，“b”， “c”。你可以通过整数索引访问它们：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[<span class=\"number\">0</span>]  <span class=\"comment\">//&#x27;a&#x27;</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\">arr</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;x&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>length</code>属性总表示一个数组有多少项元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.length    <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>除此之外它也可以用来从数组上移除尾部元素：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.length = <span class=\"number\">2</span>;</span><br><span class=\"line\">arr <span class=\"comment\">// [ &#x27;x&#x27;, &#x27;b&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>in</code>操作符也可以在数组上工作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">in</span> arr <span class=\"comment\">// arr在索引为1处是否有元素？,true</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"keyword\">in</span> arr <span class=\"comment\">// arr在索引为5处是否有元素？false</span></span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是数组是对象，因此可以有对象属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.foo = <span class=\"number\">123</span>;</span><br><span class=\"line\">arr.foo   <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h3><p>数组有许多方法。举些例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.slice(<span class=\"number\">1</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 复制元素，[ &#x27;b&#x27; ]</span></span><br><span class=\"line\">arr.slice(<span class=\"number\">1</span>)    <span class=\"comment\">// [ &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.push(<span class=\"string\">&#x27;x&#x27;</span>)  <span class=\"comment\">// 在末尾添加一个元素，4</span></span><br><span class=\"line\">arr <span class=\"comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;x&#x27; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.pop()  <span class=\"comment\">// 移除最后一个元素，&#x27;x&#x27;</span></span><br><span class=\"line\">arr   <span class=\"comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.shift()  <span class=\"comment\">// 移除第一个元素，&#x27;a&#x27;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [ &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.unshift(<span class=\"string\">&#x27;x&#x27;</span>)  <span class=\"comment\">// 在前面添加一个元素，3</span></span><br><span class=\"line\">arr <span class=\"comment\">// [ &#x27;x&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.indexOf(<span class=\"string\">&#x27;b&#x27;</span>)  <span class=\"comment\">// 查找给定项在数组中的索引，若不存在返回-1，</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">arr.indexOf(<span class=\"string\">&#x27;y&#x27;</span>)  <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.join(<span class=\"string\">&#x27;-&#x27;</span>)  <span class=\"comment\">// 将元素拼接为一个字符串，&#x27;x-b-c&#x27;</span></span><br><span class=\"line\">arr.join(<span class=\"string\">&#x27;&#x27;</span>)    <span class=\"comment\">// &#x27;xbc&#x27;</span></span><br><span class=\"line\">arr.join()  <span class=\"comment\">// &#x27;x,b,c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h3><p>有几种方法可以遍历数组元素。其中两个最重要的是<code>forEach</code>和<code>map</code>。</p>\n<p><code>forEach</code>遍历整个数组，并将当前元素和它的索引传递给一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span> ].forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elem, index</span>) </span>&#123;  <span class=\"comment\">// (*)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index + <span class=\"string\">&#x27;. &#x27;</span> + elem);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码的输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.</span> a</span><br><span class=\"line\"><span class=\"number\">1.</span> b</span><br><span class=\"line\"><span class=\"number\">2.</span> c</span><br></pre></td></tr></table></figure>\n\n<p>注意<code>（*）</code>行的函数参数是可省略的。例如：它可以只有一个参数<code>elem</code>。</p>\n<p><code>map</code>创建一个新数组，通过给每个存在数组元素应用一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*x</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// [ 1, 4, 9 ]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深入阅读-4\"><a href=\"#深入阅读-4\" class=\"headerlink\" title=\"深入阅读\"></a>深入阅读</h3><ul>\n<li><a href=\"http://yanhaijing.com/javascript/2014/01/17/fun-with-javascript-native-array-functions\">有趣的javascript原生数组函数</a></li>\n</ul>\n<h2 id=\"十五、正则表达式\"><a href=\"#十五、正则表达式\" class=\"headerlink\" title=\"十五、正则表达式\"></a>十五、正则表达式</h2><p><code>JavaScript</code>内建支持正则表达式。他们被双斜线分隔：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^abc$/</span><br><span class=\"line\">/[A-Za-z0-<span class=\"number\">9</span>]+/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法-test-：测试是否匹配\"><a href=\"#方法-test-：测试是否匹配\" class=\"headerlink\" title=\"方法 test()：测试是否匹配\"></a>方法 test()：测试是否匹配</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^a+b+$/.test(<span class=\"string\">&#x27;aaab&#x27;</span>)   <span class=\"comment\">// true</span></span><br><span class=\"line\">/^a+b+$/.test(<span class=\"string\">&#x27;aaa&#x27;</span>)    <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法-exec-：匹配和捕获组\"><a href=\"#方法-exec-：匹配和捕获组\" class=\"headerlink\" title=\"方法 exec()：匹配和捕获组\"></a>方法 exec()：匹配和捕获组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/a(b+)a/.exec(<span class=\"string\">&#x27;_abbba_aba_&#x27;</span>)    <span class=\"comment\">// [ &#x27;abbba&#x27;, &#x27;bbb&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p>返回的数组第一项（索引为0）是完整匹配，捕获的第一个分组在第二项（索引为1），等。有一种方法可以反复调用获取所有匹配。</p>\n<h3 id=\"方法-replace-：搜索并替换\"><a href=\"#方法-replace-：搜索并替换\" class=\"headerlink\" title=\"方法 replace()：搜索并替换\"></a>方法 replace()：搜索并替换</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&lt;a&gt; &lt;bbb&gt;&#x27;</span>.replace(<span class=\"regexp\">/&lt;(.*?)&gt;/g</span>, <span class=\"string\">&#x27;[$1]&#x27;</span>) <span class=\"comment\">// &#x27;[a] [bbb]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>replace</code>的第一个参数必须是正则表达式，并且开启全局搜索（<code>/g</code>标记），否则仅第一个匹配项会被替换。有一种方法使用一个函数来计算替换项。</p>\n<h2 id=\"十六、数学\"><a href=\"#十六、数学\" class=\"headerlink\" title=\"十六、数学\"></a>十六、数学</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a>是一个有算数功能的对象。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.abs(-<span class=\"number\">2</span>) <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">3</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 3^2 = 9</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">5</span>) <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.round(<span class=\"number\">1.9</span>) <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI)  <span class=\"comment\">// 预定义常量π，-1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十七、标准库的其他功能\"><a href=\"#十七、标准库的其他功能\" class=\"headerlink\" title=\"十七、标准库的其他功能\"></a>十七、标准库的其他功能</h2><p><code>JavaScript</code>标准库相对简单，但有很多其他东西你可以使用：</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a>：日期构造函数，主要功能有转换和创建日期字符串，访问日期组成部分（年，小时等）。<br><a href=\"http://www.2ality.com/2011/08/json-api.html\">JSON</a>：一个对象，功能是转换和生成<code>JSON</code>数据。<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\">console.*</a>方法：浏览器的具体方法，不是语言成分的部分，但他们也可以在<a href=\"https://nodejs.org/\">Node.js</a>中工作。</p>\n<h2 id=\"十八、下一步学什么？\"><a href=\"#十八、下一步学什么？\" class=\"headerlink\" title=\"十八、下一步学什么？\"></a>十八、下一步学什么？</h2><p>在你学会了这篇文章的基础教程后，你可以转到大部分章节末尾提到的高级教程。此外，我建议你看下面的资源：</p>\n<ul>\n<li>Style guides: I have written <a href=\"http://www.2ality.com/2013/07/meta-style-guide.html\">a guide to style guides</a></li>\n<li><a href=\"http://underscorejs.org/\">Underscore.js</a>: 一个弥补JavaScript标准库缺少的功能的库</li>\n<li><a href=\"http://jsbooks.revolunet.com/\">JSbooks – free JavaScript books</a></li>\n<li><a href=\"http://uptodate.frontendrescue.org/\">Frontend rescue: how to keep up to date on frontend technologies</a></li>\n<li><a href=\"http://yanhaijing.com/\">http://yanhaijing.com</a> 当然还有我的博客也非常不错哦</li>\n<li><a href=\"http://yanhaijing.com/es5\">http://yanhaijing.com/es5</a> 如果你想成为高手，我建议阅读<code>ecmascript</code>规范</li>\n<li><a href=\"http://yanhaijing.com/javascript/2013/12/11/24-JavaScript-best-practices-for-beginners\">给javascript初学者的24条最佳实践</a></li>\n<li><a href=\"http://yanhaijing.com/javascript/2014/04/23/seven-javascript-quirks-i-wish-id-known-about\">我希望我知道的七个JavaScript技巧</a></li>\n</ul>\n<p>参考自原文：<a href=\"http://www.2ality.com/2013/06/basic-javascript.html\">http://www.2ality.com/2013/06/basic-javascript.html</a><br>参考自译文：<a href=\"http://yanhaijing.com/basejs/\">http://yanhaijing.com/basejs/</a></p>\n"},{"title":"博客总结","_content":"\n## 搭建个人博客\n实现： hexo + githubPage + travis ci （自动化部署）\n参考链接： https://juejin.cn/post/6844904148446478343\nhexo命令： https://hexo.io/zh-cn/docs/commands\n文章的格式： https://www.jianshu.com/p/265b2c653e6f\n\n## 踩过的坑\n- [x] 搭建好之后只更改_config.yml 配置即可，看官方文档即可\n- [x] 实现自动化部署要搞清楚文档之间的关系，部署到哪里（这里githubpage相当于服务器，有时间可以了解 jekins自动化部署相关内容https://www.jenkins.io/）\n","source":"_posts/日记/mypage.md","raw":"---\ntitle: 博客总结\n## date: 2021-04-12 21:49:09\n---\n\n## 搭建个人博客\n实现： hexo + githubPage + travis ci （自动化部署）\n参考链接： https://juejin.cn/post/6844904148446478343\nhexo命令： https://hexo.io/zh-cn/docs/commands\n文章的格式： https://www.jianshu.com/p/265b2c653e6f\n\n## 踩过的坑\n- [x] 搭建好之后只更改_config.yml 配置即可，看官方文档即可\n- [x] 实现自动化部署要搞清楚文档之间的关系，部署到哪里（这里githubpage相当于服务器，有时间可以了解 jekins自动化部署相关内容https://www.jenkins.io/）\n","slug":"日记/mypage","published":1,"date":"2021-04-13T02:55:58.849Z","updated":"2021-04-13T02:59:32.532Z","_id":"cknffs2zr00003wu13sukcep3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"搭建个人博客\"><a href=\"#搭建个人博客\" class=\"headerlink\" title=\"搭建个人博客\"></a>搭建个人博客</h2><p>实现： hexo + githubPage + travis ci （自动化部署）<br>参考链接： <a href=\"https://juejin.cn/post/6844904148446478343\">https://juejin.cn/post/6844904148446478343</a><br>hexo命令： <a href=\"https://hexo.io/zh-cn/docs/commands\">https://hexo.io/zh-cn/docs/commands</a><br>文章的格式： <a href=\"https://www.jianshu.com/p/265b2c653e6f\">https://www.jianshu.com/p/265b2c653e6f</a></p>\n<h2 id=\"踩过的坑\"><a href=\"#踩过的坑\" class=\"headerlink\" title=\"踩过的坑\"></a>踩过的坑</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 搭建好之后只更改_config.yml 配置即可，看官方文档即可</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 实现自动化部署要搞清楚文档之间的关系，部署到哪里（这里githubpage相当于服务器，有时间可以了解 jekins自动化部署相关内容<a href=\"https://www.jenkins.io/%EF%BC%89\">https://www.jenkins.io/）</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搭建个人博客\"><a href=\"#搭建个人博客\" class=\"headerlink\" title=\"搭建个人博客\"></a>搭建个人博客</h2><p>实现： hexo + githubPage + travis ci （自动化部署）<br>参考链接： <a href=\"https://juejin.cn/post/6844904148446478343\">https://juejin.cn/post/6844904148446478343</a><br>hexo命令： <a href=\"https://hexo.io/zh-cn/docs/commands\">https://hexo.io/zh-cn/docs/commands</a><br>文章的格式： <a href=\"https://www.jianshu.com/p/265b2c653e6f\">https://www.jianshu.com/p/265b2c653e6f</a></p>\n<h2 id=\"踩过的坑\"><a href=\"#踩过的坑\" class=\"headerlink\" title=\"踩过的坑\"></a>踩过的坑</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 搭建好之后只更改_config.yml 配置即可，看官方文档即可</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 实现自动化部署要搞清楚文档之间的关系，部署到哪里（这里githubpage相当于服务器，有时间可以了解 jekins自动化部署相关内容<a href=\"https://www.jenkins.io/%EF%BC%89\">https://www.jenkins.io/）</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cknffl9r30008s8u16qvo84ke","category_id":"cknffl9r40009s8u18gtagxfw","_id":"cknffl9r6000cs8u11kkra7m3"}],"PostTag":[{"post_id":"cknffl9r30008s8u16qvo84ke","tag_id":"cknffl9r5000as8u1dhfrb4f2","_id":"cknffl9r6000bs8u12f577dbt"}],"Tag":[{"name":"JavaScript","_id":"cknffl9r5000as8u1dhfrb4f2"}]}}